[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Investigating Temperature and Income in San Jose\n\n\n\nMEDS\n\n\nStats\n\n\n\nStatistical data analysis project concering the relationship between heat and income in San Jose, CA\n\n\n\nNaomi Moraes\n\n\nDec 12, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThomas Fire Analysis\n\n\n\nPython\n\n\nMEDS\n\n\nGeospatial\n\n\n\nUsing Python to Examine the Santa Barbara Thomas Fire\n\n\n\nNaomi Moraes\n\n\nOct 18, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nblog post title\n\n\n\nQuarto\n\n\nMEDS\n\n\nSanFran\n\n\n\na short catchy description of the blog post\n\n\n\nNaomi Moraes\n\n\nOct 18, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site:\nThis is a website I’m making for grad school. I will be posting professional repositories and the like here!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Naomi Moraes",
    "section": "",
    "text": "Having lived in multiple states and abroad, Naomi Moraes has appreciated the global interconnectivity of local environmental issues and solutions, from an early age. Her interest in mitigating climate change impacts led her to complete her undergraduate degree in Economics and Environmental Studies at the University of Michigan, Ann Arbor, where she graduated with a Bachelor of Arts in 2021."
  },
  {
    "objectID": "blog/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post.html",
    "href": "blog/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post.html",
    "title": "nmoraescommit",
    "section": "",
    "text": "# Import Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Read in data\naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip', compression = 'zip')\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip', compression = 'zip')\n\n# Concatenate both dataframes\naqi = pd.concat([aqi_17, aqi_18])\n\n# Simplify column names\naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\n# Create filter Santa Barbara df with dropped columns\naqi_sb = aqi[aqi['county_name'] == 'Santa Barbara']\naqi_sb = aqi_sb.drop(columns = ['state_name','county_name','state_code','county_code'], axis = 1)\n               \n# Change 'date' to datetime and set to index\naqi_sb.date = pd.to_datetime(aqi_sb['date'])\naqi_sb = aqi_sb.set_index('date')\n               \n# Calculate AQI rolling average over 5 days\nrolling_average = aqi_sb['aqi'].rolling('5D').mean()\n               \n# Create column with new variable 'rolling_variable'\naqi_sb['five_day_average'] = rolling_average\n               \n# Create plot with daily AQI and 5-day averages\ndaily_aqi_plot = aqi_sb[['aqi','five_day_average']].plot(title = 'Daily and 5-Day Average AQI in Santa Barbara County',\n                                  xlabel = 'Date',\n                                  ylabel = 'AQI')"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post.html",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post.html",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "The purpose of this blogpost is to show the exploration and visualization of the impacts of the Santa Barbara Thomas Fire (2017). In this post we will cover the impact the wildfire had on the air quality index of the surrounding area as well as the burn scar it produced.\nThe Air Quality Index (AQI) is a tool for reporting daily air quality. It tells you how clean or polluted your air is and what associated health effects might be a concern for you. Health effects can include negative long-term health impacts like “heart or lung disease, asthma attacks, heart attacks, irregular heartbeat, decreased lung function, and increased respiratory symptoms, such as irritation of the airways, coughing or difficulty breathing” as cited in EPA.gov - EJScreen .\nThe visualization of the Thomas Fire burn scar allows us to see the preliminary impact the fire had on infrastructures, ecosystems, and communities - through its size, shape, and location.\n\n\n\nThe AQI analysis portion of the project introduced me to working with fundamental python data cleaning tools, the DateTime module, as well as graph creation. The latter portion allowed me to try my hand with working with satellite data, false and true colour imagery creation, and map creation.\n\n\n\nLandsat Data: This contains red, green, blue, near-infrared and shortwave infrared bands from the Landsat Collection 2 Level-2, collected by the Landsat 8 satellite. The data was retrieved from the Microsoft Planetary Computer data catalogue and pre-processed to remove data outside land and coarsen the spatial resolution.\nCitation: Microsoft Planetary Computer. Planetary Computer. (2018, January 12). https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2\nThomas Fire Perimeter Data: This dataset was published and maintained by CAL FIRE, but accessed through Data.gov. The statewide fire history geospatial dataset is updated annually from the previous fire season, during spring, from units across the state and cooperating agencies.\nCitation: Publisher CAL FIRE. (2024, May 14). State of California - california fire perimeters (all). Catalog. https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436\nAir Quality Index (AQI): This dataset is sourced from the EPA’s AirData tool. These files are updated twice per year and is calculated daily for each monitor for the Criteria Gases and PM10 and PM2.5. For this analysis, I will use daily AQI data for 2017 and 2018.\nCitation: Environmental Protection Agency AirData (2024), Daily AQI by County [Data Set] Available from: https://www.epa.gov/outdoor-air-quality-data/download-daily-data. Access date: October 20, 2024.\n\n\n\nThis repository was created as the second and fourth assignments for the graduate course EDS 220: Working with Environmental Datasets in the Masters of Environmental Data Science (MEDS) program, taught by Dr. Carmen Galaz García.\n\n\n\nGitHub Link\n\n\n\n\nImporting all relevant libraries - for all excersizes in this blog post.\n\n# Import Libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport rioxarray as rioxr\n\n\n\n\n\n\nIn this section I will be plotting the daily AQI as well as 5-day average AQI from 2017-2018. First, I’ll read in the data and clean the column namees for easier handling.\n\n# Read in data\naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip', compression = 'zip')\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip', compression = 'zip')\n\n# Concatenate both dataframes\naqi = pd.concat([aqi_17, aqi_18])\n\n# Simplify column names\naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\nI’ll then filter the data for AQI representative of Santa Barbara county only.\n\n# Create filter Santa Barbara df with dropped columns\naqi_sb = aqi[aqi['county_name'] == 'Santa Barbara']\naqi_sb = aqi_sb.drop(columns = ['state_name','county_name','state_code','county_code'], axis = 1)\n               \n# Change 'date' to datetime and set to index\naqi_sb.date = pd.to_datetime(aqi_sb['date'])\naqi_sb = aqi_sb.set_index('date')\n\nWe will use rolling averages to visualize short-term temporal trends. As my datetime column already has the day, I can use the pandas.DataFrame.rolling() method to get the average AQI within a 5 day window.\n\n\n\n\n# Calculate AQI rolling average over 5 days\nrolling_average = aqi_sb['aqi'].rolling('5D').mean()\n               \n# Create column with new variable 'rolling_variable'\naqi_sb['five_day_average'] = rolling_average\n\nFinally I’ll create a plot with the daily and five day average AI for Santa Barbara. This will give us a good understanding of how the AQI was impacted - in large part due to the Thomas Fire.\n\n\n\n\n# Initialize figure\nfig, ax = plt.subplots(figsize=(9,5))\n\n# Add daily and 5-day average AQI\naqi_sb.five_day_average.plot(ax=ax, color = 'orange', zorder = 3)\naqi_sb.aqi.plot(ax=ax, color = 'cornflowerblue', zorder = 2)\n\n# Update axis labels and title\nplt.xlabel('Date')\nplt.ylabel('AQI')\nplt.title('AQI during the 2017 Thomas Fire in Santa Barbara County')\n\n# Add legend\nax.legend(labels = ['Daily AQI', '5-day average AQI'])\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n# Display all columns when looking at dataframes\npd.set_option(\"display.max.columns\", None)\n\n\n# Create data filepath\nfp = os.path.join('data','California_Fire_Perimeters_(all).shp')\n\n# Create dataframe for CA fire perimeter shapefile\nca_fire_perimeter = gpd.read_file(fp)\n\n\n\n\nIn this section we will take a preliminary look at the imported fire perimeter data - in order to understand how to extract the Thomas Fire perimenter data.\n\n# Check dataframe head\nca_fire_perimeter.head(3)\n\n\n# Check CRS - and type\nca_fire_perimeter.crs\n\nAfter the exploration of the California perimeter shape file, imported into this notebook, I see that is has 22,260 fire perimeter observations with columns for varied descriptive markers including: year, fire name, alarm date, and geometery. I observe that some of the column data types int64 and float64, however, I may want to change the date columns into datetime objects for manipulation. The CRS of this shapefile is a projected coordinate reference system, EPSG: 3857 and is a popular crs for web mapping services.\n\n\n\nNext, I will clean the data for easier data manipulation.\n\n# Simplify column names by replacing spaces and no capitilization\nca_fire_perimeter.columns = (ca_fire_perimeter.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\n# Make dates into DateTime object\nca_fire_perimeter.alarm_date = pd.to_datetime(ca_fire_perimeter.alarm_date)\nca_fire_perimeter.cont_date = pd.to_datetime(ca_fire_perimeter.cont_date)\n\n\n\n\nHere, I will select for the Thomas Fire Boundary (2017), and save it as a new geospatial file.\n\n# Select Thomas Fire in 2017\nthomas_fire_boundary = ca_fire_perimeter[(ca_fire_perimeter['alarm_date'] &gt; '2016-12-31') & \n                                         (ca_fire_perimeter['alarm_date'] &lt; '2018-01-01') &\n                                         (ca_fire_perimeter['fire_name'] == 'THOMAS')]\n\n\n# View dataframe\nthomas_fire_boundary\n\n\n# Save dataframe as geospatial file in /data folder\nthomas_fire_boundary.to_file('data/thomas_fire_boundary.geojson', driver = 'GeoJSON')\n\nI chose to convert the alarm_date and cont_date variables into DateTime objects, and wanted them to retain that data type. As I would need to convert DateTime objects back into strings to save as shapefile, I chose to store the new data frame as a GeoJSON file. I have saved the data in the ‘data/’ folder common to this project.\n\n\n\n\n\nIn a new notebook, I have created a path to the Thomas Fire perimeter data saved in the previous step.\n\n\n\n# Set up file paths\nland_fp = os.path.join('data', 'landsat8-2018-01-26-sb-simplified.nc')\nthomas_fp = os.path.join('data', 'thomas_fire_boundary.geojson')\n\n# Import landsat data\nlandsat = rioxr.open_rasterio(land_fp)\n\n# Import Thomas Fire perimeter\nthomas_fire_perimeter = gpd.read_file(thomas_fp)\n\n\n\n\nIn this section we will take a preliminary look at the imported landsat data - in order to understand how to visualize it with respect to the Thomas Fire perimenter data.\n\n# View landsat\nlandsat\n\n\n# View landsat sizes\nlandsat.sizes\n\n\n# Landsat CRS\nlandsat.rio.crs\n\nThrough the exploration of the “landsat” xarray.Dataset, I have been able to notice the shape (5, 1, 731, 870) and the dimensions (x coordinates, y coordinates and 1 band). The data’s variables has 5 groups of information - red, green, blue, near infrared 08, and short wave infrared 22. The crs of the dataset is ESPG: 32611.\n\n\n\nIn this section, we will remove the band dimension of the Landsat data (as there is only 1).\n\n# Drop the band dimension of the data\nlandsat = landsat.squeeze()\n\n# Remove coordinates associated to band dimension\nlandsat = landsat.drop_vars('band')\n\n# Check new landsat dataset\nprint(landsat.dims, landsat.coords)\n\n\n\n\nIn this section, I will make some preliminary visuals of the landsat data. I will be making true and false color images.\n\n\n\n# Adjust the scale for plotting the bands for a true color image\nfig, ax = plt.subplots(figsize = (5, 5)) # Set up plot\n\n(landsat[['red', 'green', 'blue']]).to_array().plot.imshow(robust = True) # Plot Landsat True Color image\n\nax.set_title(\"Santa Barbara County (True Color Image)\")  # Add title\n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Show map\nplt.show()\n\n\n\n\n\n# Plot false color image\nfig, ax = plt.subplots(figsize = (5, 5)) # Set up plot\n\n(landsat[['swir22', 'nir08', 'red']]).to_array().plot.imshow(robust = True) # Plot landsat false color image\n\n# Add title\nax.set_title(\"Santa Barbara County (False Color Image)\") \n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Show map\nplt.show()\n\nNotice how, in the false color image, the area approximating the Thomas Fires are a orange-red color compared to the rest of the green in the county.\n\n\n\n\nIn this final section, we will create maps of Santa Barbara overlayed with the Thomas Fire perimeter data (that we obtained in the fire perimeter notebook).\n\n# Set CRS of landsat and thomas_fire_perimeter equivalent\nthomas_fire_perimeter = thomas_fire_perimeter.to_crs(crs = landsat.rio.crs)\n\n# Test if equivalencies true\nassert thomas_fire_perimeter.crs == landsat.rio.crs\n\n\n# Create bounding box for fire perimeters\nlandsat_bounded = landsat.rio.clip_box(*thomas_fire_perimeter.total_bounds)\n\n# Clip map to fire perimeter bounds\nfig, ax = plt.subplots(figsize = (10, 10)) # Setup plot\nlandsat_bounded[['swir22', 'nir08', 'red']].to_array().plot.imshow(ax = ax, robust = True) # Plot the landsat bands\n\nthomas_fire_perimeter.boundary.plot(ax = ax, edgecolor = '#5F0A11', linewidth = 2, label=\"Thomas Fire Boundary\") # Plot the thomas fire data on same plot\n\n# Add title\nax.set_title(\"Thomas Fire Burn Perimeter (2017) in Santa Barbara County (False Color Image)\")  \n\n# Set legend within map borders\nax.legend()\n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Set legend\nax.legend()\n\n# Show map\nplt.show()\n\n\n\nThe 2 maps in the “Map” portion of this notebook, shows Santa Barbara County with fase color imagery - which include short wave infrared, near infrared, and red bands. The 2017 Thomas Fire burn perimeter is outlined in dark red, on top of this false image map, and it also appears red inside the perimeter (because of the false color imaging). This is due to the fact that it highly reflects shortwave infared. The Thomas Fire started 12/4/2017 and was contained on 1/12/2018. This imagery is therefore taken shortly after the fire was contained, on 1/26/2018."
  },
  {
    "objectID": "posts/2024-10-18-my-first-post/index.html",
    "href": "posts/2024-10-18-my-first-post/index.html",
    "title": "blog post title",
    "section": "",
    "text": "I’m going to insert a footnote here1"
  },
  {
    "objectID": "posts/2024-10-18-my-first-post/index.html#this-is-my-first-section",
    "href": "posts/2024-10-18-my-first-post/index.html#this-is-my-first-section",
    "title": "blog post title",
    "section": "",
    "text": "I’m going to insert a footnote here1"
  },
  {
    "objectID": "posts/2024-10-18-my-first-post/index.html#this-is-my-second",
    "href": "posts/2024-10-18-my-first-post/index.html#this-is-my-second",
    "title": "blog post title",
    "section": "This is my second",
    "text": "This is my second\nHere’s my next paragraph2\nI’m citing me(online?)"
  },
  {
    "objectID": "posts/2024-10-18-my-first-post/index.html#cite-a-google-article-now",
    "href": "posts/2024-10-18-my-first-post/index.html#cite-a-google-article-now",
    "title": "blog post title",
    "section": "Cite a google article now",
    "text": "Cite a google article now\nHere is more rando text- this is a journal article cite now (Gaynor et al. 2022)"
  },
  {
    "objectID": "posts/2024-10-18-my-first-post/index.html#footnotes",
    "href": "posts/2024-10-18-my-first-post/index.html#footnotes",
    "title": "blog post title",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nHere is a new footnote↩︎\nHere is my second footnote↩︎"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/index.html",
    "href": "posts/2024-12-01-thomas-fire-sb/index.html",
    "title": "Thomas Fire SB",
    "section": "",
    "text": "I’m going to insert a footnote here1"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/index.html#this-is-my-first-section",
    "href": "posts/2024-12-01-thomas-fire-sb/index.html#this-is-my-first-section",
    "title": "Thomas Fire SB",
    "section": "",
    "text": "I’m going to insert a footnote here1"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/index.html#this-is-my-second",
    "href": "posts/2024-12-01-thomas-fire-sb/index.html#this-is-my-second",
    "title": "Thomas Fire SB",
    "section": "This is my second",
    "text": "This is my second\nHere’s my next paragraph2\nI’m citing me[@online]"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/index.html#cite-a-google-article-now",
    "href": "posts/2024-12-01-thomas-fire-sb/index.html#cite-a-google-article-now",
    "title": "Thomas Fire SB",
    "section": "Cite a google article now",
    "text": "Cite a google article now\nHere is more rando text- this is a journal article cite now [@gaynor2022]"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/index.html#footnotes",
    "href": "posts/2024-12-01-thomas-fire-sb/index.html#footnotes",
    "title": "Thomas Fire SB",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nHere is a new footnote↩︎\nHere is my second footnote↩︎"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-2.html",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-2.html",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "Thomas Fire The Thomas fire burns through Los Padres National Forest near Ojai, Calif., on Friday, Dec. 8, 2017. (AP Photo/Noah Berger)\n\n\n\n\nThe Santa Barbara Thomas Fre “… burned approximately 281,893 acres (440 sq mi; 114,078 ha) before being fully contained on January 12, 2018, making it the largest wildfire in modern California history at the time.”Wikipedia It was hugely detrimental to the impacted areas, economically and environmentally.\nThe purpose of this blogpost is to explore and visualize the impacts of the Santa Barbara Thomas Fire. In this post we will cover the impact the wildfire had on the air quality index of the surrounding area as well as the burn scar it produced.\nThe Air Quality Index (AQI) is a tool for reporting daily air quality. It tells you how clean or polluted your air is and what associated health effects might be a concern for you. Health effects can include negative long-term health impacts like “heart or lung disease, asthma attacks, heart attacks, irregular heartbeat, decreased lung function, and increased respiratory symptoms, such as irritation of the airways, coughing or difficulty breathing” as cited in EPA.gov - EJScreen .\nThe visualization of the Thomas Fire burn scar allows us to see the preliminary impact the fire had on infrastructures, ecosystems, and communities - through its size, shape, and location.\n\n\n\nThe AQI analysis portion of the project introduced me to working with fundamental python data cleaning tools, the DateTime module, as well as graph creation. The latter portion allowed me to try my hand with working with satellite data, false and true colour imagery creation, and map creation.\n\n\n\nLandsat Data: This contains red, green, blue, near-infrared and shortwave infrared bands from the Landsat Collection 2 Level-2, collected by the Landsat 8 satellite. The data was retrieved from the Microsoft Planetary Computer data catalogue and pre-processed to remove data outside land and coarsen the spatial resolution.\nCitation: Microsoft Planetary Computer. Planetary Computer. (2018, January 12). https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2\nThomas Fire Perimeter Data: This dataset was published and maintained by CAL FIRE, but accessed through Data.gov. The statewide fire history geospatial dataset is updated annually from the previous fire season, during spring, from units across the state and cooperating agencies.\nCitation: Publisher CAL FIRE. (2024, May 14). State of California - california fire perimeters (all). Catalog. https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436\nAir Quality Index (AQI): This dataset is sourced from the EPA’s AirData tool. These files are updated twice per year and is calculated daily for each monitor for the Criteria Gases and PM10 and PM2.5. For this analysis, I will use daily AQI data for 2017 and 2018.\nCitation: Environmental Protection Agency AirData (2024), Daily AQI by County [Data Set] Available from: https://www.epa.gov/outdoor-air-quality-data/download-daily-data. Access date: October 20, 2024.\n\n\n\nThis repository was created as the second and fourth assignments for the graduate course EDS 220: Working with Environmental Datasets in the Masters of Environmental Data Science (MEDS) program, taught by Dr. Carmen Galaz García.\n\n\n\nGitHub Link\n\n\n\n\nImporting all relevant libraries - for all excersizes in this blog post.\n\n# Import Libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport rioxarray as rioxr\n\n\n\n\n\n\nIn this section I will be plotting the daily AQI as well as 5-day average AQI from 2017-2018. First, I’ll read in the data and clean the column namees for easier handling.\n\n# Read in data\naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip', compression = 'zip')\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip', compression = 'zip')\n\n# Concatenate both dataframes\naqi = pd.concat([aqi_17, aqi_18])\n\n# Simplify column names\naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\nI’ll then filter the data for AQI representative of Santa Barbara county only.\n\n# Create filter Santa Barbara df with dropped columns\naqi_sb = aqi[aqi['county_name'] == 'Santa Barbara']\naqi_sb = aqi_sb.drop(columns = ['state_name','county_name','state_code','county_code'], axis = 1)\n               \n# Change 'date' to datetime and set to index\naqi_sb.date = pd.to_datetime(aqi_sb['date'])\naqi_sb = aqi_sb.set_index('date')\n\nWe will use rolling averages to visualize short-term temporal trends. As my datetime column already has the day, I can use the pandas.DataFrame.rolling() method to get the average AQI within a 5 day window.\n\n\n\n\n# Calculate AQI rolling average over 5 days\nrolling_average = aqi_sb['aqi'].rolling('5D').mean()\n               \n# Create column with new variable 'rolling_variable'\naqi_sb['five_day_average'] = rolling_average\n\nFinally I’ll create a plot with the daily and five day average AI for Santa Barbara. This will give us a good understanding of how the AQI was impacted - in large part due to the Thomas Fire.\n\n\n\n\n# Initialize figure\nfig, ax = plt.subplots(figsize=(9,5))\n\n# Add daily and 5-day average AQI\naqi_sb.five_day_average.plot(ax=ax, color = 'orange', zorder = 3)\naqi_sb.aqi.plot(ax=ax, color = 'cornflowerblue', zorder = 2)\n\n# Update axis labels and title\nplt.xlabel('Date')\nplt.ylabel('AQI')\nplt.title('AQI during the 2017 Thomas Fire in Santa Barbara County')\n\n# Add legend\nax.legend(labels = ['Daily AQI', '5-day average AQI'])\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Display all columns when looking at dataframes\npd.set_option(\"display.max.columns\", None)\n\n\n# Create data filepath\nfp = os.path.join('data','California_Fire_Perimeters_(all).shp')\n\n# Create dataframe for CA fire perimeter shapefile\nca_fire_perimeter = gpd.read_file(fp)\n\n\n\n\nIn this section we will take a preliminary look at the imported fire perimeter data - in order to understand how to extract the Thomas Fire perimenter data.\n\n# Check dataframe head\nca_fire_perimeter.head(3)\n\n\n\n\n\n\n\n\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nALARM_DATE\nCONT_DATE\nCAUSE\nC_METHOD\nOBJECTIVE\nGIS_ACRES\nCOMMENTS\nCOMPLEX_NA\nIRWINID\nFIRE_NUM\nCOMPLEX_ID\nDECADES\ngeometry\n\n\n\n\n0\n2023\nCA\nCDF\nSKU\nWHITWORTH\n00004808\n2023-06-17\n2023-06-17\n5\n1\n1\n5.72913\nNone\nNone\n{7985848C-0AC2-4BA4-8F0E-29F778652E61}\nNone\nNone\n2020\nPOLYGON ((-13682443.000 5091132.739, -13682445...\n\n\n1\n2023\nCA\nLRA\nBTU\nKAISER\n00010225\n2023-06-02\n2023-06-02\n5\n1\n1\n13.60240\nNone\nNone\n{43EBCC88-B3AC-48EB-8EF5-417FE0939CCF}\nNone\nNone\n2020\nPOLYGON ((-13576727.142 4841226.161, -13576726...\n\n\n2\n2023\nCA\nCDF\nAEU\nJACKSON\n00017640\n2023-07-01\n2023-07-02\n2\n1\n1\n27.81450\nNone\nNone\n{B64E1355-BF1D-441A-95D0-BC1FBB93483B}\nNone\nNone\n2020\nPOLYGON ((-13459243.000 4621236.000, -13458968...\n\n\n\n\n\n\n\n\n# Check CRS - and type\nca_fire_perimeter.crs\n\n&lt;Projected CRS: EPSG:3857&gt;\nName: WGS 84 / Pseudo-Mercator\nAxis Info [cartesian]:\n- X[east]: Easting (metre)\n- Y[north]: Northing (metre)\nArea of Use:\n- name: World between 85.06°S and 85.06°N.\n- bounds: (-180.0, -85.06, 180.0, 85.06)\nCoordinate Operation:\n- name: Popular Visualisation Pseudo-Mercator\n- method: Popular Visualisation Pseudo Mercator\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\nAfter the exploration of the California perimeter shape file, imported into this notebook, I see that is has 22,260 fire perimeter observations with columns for varied descriptive markers including: year, fire name, alarm date, and geometery. I observe that some of the column data types int64 and float64, however, I may want to change the date columns into datetime objects for manipulation. The CRS of this shapefile is a projected coordinate reference system, EPSG: 3857 and is a popular crs for web mapping services.\n\n\n\nNext, I will clean the data for easier data manipulation.\n\n# Simplify column names by replacing spaces and no capitilization\nca_fire_perimeter.columns = (ca_fire_perimeter.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\n# Make dates into DateTime object\nca_fire_perimeter.alarm_date = pd.to_datetime(ca_fire_perimeter.alarm_date)\nca_fire_perimeter.cont_date = pd.to_datetime(ca_fire_perimeter.cont_date)\n\n\n\n\nHere, I will select for the Thomas Fire Boundary (2017), and save it as a new geospatial file.\n\n# Select Thomas Fire in 2017\nthomas_fire_boundary = ca_fire_perimeter[(ca_fire_perimeter['alarm_date'] &gt; '2016-12-31') & \n                                         (ca_fire_perimeter['alarm_date'] &lt; '2018-01-01') &\n                                         (ca_fire_perimeter['fire_name'] == 'THOMAS')]\n\n\n# View dataframe\nthomas_fire_boundary\n\n\n\n\n\n\n\n\nyear_\nstate\nagency\nunit_id\nfire_name\ninc_num\nalarm_date\ncont_date\ncause\nc_method\nobjective\ngis_acres\ncomments\ncomplex_na\nirwinid\nfire_num\ncomplex_id\ndecades\ngeometry\n\n\n\n\n2654\n2017\nCA\nUSF\nVNC\nTHOMAS\n00003583\n2017-12-04\n2018-01-12\n9\n7\n1\n281791.0\nCONT_DATE based on Inciweb\nNone\nNone\nNone\nNone\n2010\nMULTIPOLYGON (((-13316089.016 4088553.040, -13...\n\n\n\n\n\n\n\n\n# Save dataframe as geospatial file in /data folder\nthomas_fire_boundary.to_file('data/thomas_fire_boundary.geojson', driver = 'GeoJSON')\n\nI chose to convert the alarm_date and cont_date variables into DateTime objects, and wanted them to retain that data type. As I would need to convert DateTime objects back into strings to save as shapefile, I chose to store the new data frame as a GeoJSON file. I have saved the data in the ‘data/’ folder common to this project.\n\n\n\n\n\nIn a new notebook, I have created a path to the Thomas Fire perimeter data saved in the previous step.\n\n\n\n# Set up file paths\nland_fp = os.path.join('data', 'landsat8-2018-01-26-sb-simplified.nc')\nthomas_fp = os.path.join('data', 'thomas_fire_boundary.geojson')\n\n# Import landsat data\nlandsat = rioxr.open_rasterio(land_fp)\n\n# Import Thomas Fire perimeter\nthomas_fire_perimeter = gpd.read_file(thomas_fp)\n\n\n\n\nIn this section we will take a preliminary look at the imported landsat data - in order to understand how to visualize it with respect to the Thomas Fire perimenter data.\n\n# View landsat\nlandsat\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870, band: 1)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * band         (band) int64 1\n    spatial_ref  int64 0\nData variables:\n    red          (band, y, x) float64 ...\n    green        (band, y, x) float64 ...\n    blue         (band, y, x) float64 ...\n    nir08        (band, y, x) float64 ...\n    swir22       (band, y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870band: 1Coordinates: (4)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])band(band)int641array([1])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\n\n# View landsat sizes\nlandsat.sizes\n\nFrozen({'y': 731, 'x': 870, 'band': 1})\n\n\n\n# Landsat CRS\nlandsat.rio.crs\n\nCRS.from_epsg(32611)\n\n\nThrough the exploration of the “landsat” xarray.Dataset, I have been able to notice the shape (5, 1, 731, 870) and the dimensions (x coordinates, y coordinates and 1 band). The data’s variables has 5 groups of information - red, green, blue, near infrared 08, and short wave infrared 22. The crs of the dataset is ESPG: 32611.\n\n\n\nIn this section, we will remove the band dimension of the Landsat data (as there is only 1).\n\n# Drop the band dimension of the data\nlandsat = landsat.squeeze()\n\n# Remove coordinates associated to band dimension\nlandsat = landsat.drop_vars('band')\n\n# Check new landsat dataset\nprint(landsat.dims, landsat.coords)\n\nFrozen({'y': 731, 'x': 870}) Coordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n    spatial_ref  int64 0\n\n\n\n\n\nIn this section, I will make some preliminary visuals of the landsat data. I will be making true and false color images.\n\n\n\n# Adjust the scale for plotting the bands for a true color image\nfig, ax = plt.subplots(figsize = (5, 5)) # Set up plot\n\n(landsat[['red', 'green', 'blue']]).to_array().plot.imshow(robust = True) # Plot Landsat True Color image\n\nax.set_title(\"Santa Barbara County (True Color Image)\")  # Add title\n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Show map\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n# Plot false color image\nfig, ax = plt.subplots(figsize = (5, 5)) # Set up plot\n\n(landsat[['swir22', 'nir08', 'red']]).to_array().plot.imshow(robust = True) # Plot landsat false color image\n\n# Add title\nax.set_title(\"Santa Barbara County (False Color Image)\") \n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Show map\nplt.show()\n\n\n\n\n\n\n\n\nNotice how, in the false color image, the area approximating the Thomas Fires are a orange-red color compared to the rest of the green in the county.\n\n\n\n\nIn this final section, we will create maps of Santa Barbara overlayed with the Thomas Fire perimeter data (that we obtained in the fire perimeter notebook).\n\n# Set CRS of landsat and thomas_fire_perimeter equivalent\nthomas_fire_perimeter = thomas_fire_perimeter.to_crs(crs = landsat.rio.crs)\n\n# Test if equivalencies true\nassert thomas_fire_perimeter.crs == landsat.rio.crs\n\n\n# Create bounding box for fire perimeters\nlandsat_bounded = landsat.rio.clip_box(*thomas_fire_perimeter.total_bounds)\n\n# Clip map to fire perimeter bounds\nfig, ax = plt.subplots(figsize = (10, 10)) # Setup plot\nlandsat_bounded[['swir22', 'nir08', 'red']].to_array().plot.imshow(ax = ax, robust = True) # Plot the landsat bands\n\nthomas_fire_perimeter.boundary.plot(ax = ax, edgecolor = '#5F0A11', linewidth = 2, label=\"Thomas Fire Boundary\") # Plot the thomas fire data on same plot\n\n# Add title\nax.set_title(\"Thomas Fire Burn Perimeter (2017) in Santa Barbara County (False Color Image)\")  \n\n# Set legend within map borders\nax.legend()\n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Set legend\nax.legend()\n\n# Show map\nplt.show()\n\n\n\n\n\n\n\n\n\n\nThe 2 maps in the “Map” portion of this notebook, shows Santa Barbara County with fase color imagery - which include short wave infrared, near infrared, and red bands. The 2017 Thomas Fire burn perimeter is outlined in dark red, on top of this false image map, and it also appears red inside the perimeter (because of the false color imaging). This is due to the fact that it highly reflects shortwave infared. The Thomas Fire started 12/4/2017 and was contained on 1/12/2018. This imagery is therefore taken shortly after the fire was contained, on 1/26/2018."
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post.html#import-libraries",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post.html#import-libraries",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "Importing all relevant libraries - for all excersizes in this blog post.\n\n# Import Libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport rioxarray as rioxr"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post.html#air-quality-index-analysis",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post.html#air-quality-index-analysis",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "In this section I will be plotting the daily AQI as well as 5-day average AQI from 2017-2018. First, I’ll read in the data and clean the column namees for easier handling.\n\n# Read in data\naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip', compression = 'zip')\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip', compression = 'zip')\n\n# Concatenate both dataframes\naqi = pd.concat([aqi_17, aqi_18])\n\n# Simplify column names\naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\nI’ll then filter the data for AQI representative of Santa Barbara county only.\n\n# Create filter Santa Barbara df with dropped columns\naqi_sb = aqi[aqi['county_name'] == 'Santa Barbara']\naqi_sb = aqi_sb.drop(columns = ['state_name','county_name','state_code','county_code'], axis = 1)\n               \n# Change 'date' to datetime and set to index\naqi_sb.date = pd.to_datetime(aqi_sb['date'])\naqi_sb = aqi_sb.set_index('date')\n\nWe will use rolling averages to visualize short-term temporal trends. As my datetime column already has the day, I can use the pandas.DataFrame.rolling() method to get the average AQI within a 5 day window.\n\n\n\n\n# Calculate AQI rolling average over 5 days\nrolling_average = aqi_sb['aqi'].rolling('5D').mean()\n               \n# Create column with new variable 'rolling_variable'\naqi_sb['five_day_average'] = rolling_average\n\nFinally I’ll create a plot with the daily and five day average AI for Santa Barbara. This will give us a good understanding of how the AQI was impacted - in large part due to the Thomas Fire.\n\n\n\n\n# Initialize figure\nfig, ax = plt.subplots(figsize=(9,5))\n\n# Add daily and 5-day average AQI\naqi_sb.five_day_average.plot(ax=ax, color = 'orange', zorder = 3)\naqi_sb.aqi.plot(ax=ax, color = 'cornflowerblue', zorder = 2)\n\n# Update axis labels and title\nplt.xlabel('Date')\nplt.ylabel('AQI')\nplt.title('AQI during the 2017 Thomas Fire in Santa Barbara County')\n\n# Add legend\nax.legend(labels = ['Daily AQI', '5-day average AQI'])\n\nplt.show()"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post.html#fire-perimeter-data-retrieval-and-selection",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post.html#fire-perimeter-data-retrieval-and-selection",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "# Display all columns when looking at dataframes\npd.set_option(\"display.max.columns\", None)\n\n\n# Create data filepath\nfp = os.path.join('data','California_Fire_Perimeters_(all).shp')\n\n# Create dataframe for CA fire perimeter shapefile\nca_fire_perimeter = gpd.read_file(fp)\n\n\n\n\nIn this section we will take a preliminary look at the imported fire perimeter data - in order to understand how to extract the Thomas Fire perimenter data.\n\n# Check dataframe head\nca_fire_perimeter.head(3)\n\n\n# Check CRS - and type\nca_fire_perimeter.crs\n\nAfter the exploration of the California perimeter shape file, imported into this notebook, I see that is has 22,260 fire perimeter observations with columns for varied descriptive markers including: year, fire name, alarm date, and geometery. I observe that some of the column data types int64 and float64, however, I may want to change the date columns into datetime objects for manipulation. The CRS of this shapefile is a projected coordinate reference system, EPSG: 3857 and is a popular crs for web mapping services.\n\n\n\nNext, I will clean the data for easier data manipulation.\n\n# Simplify column names by replacing spaces and no capitilization\nca_fire_perimeter.columns = (ca_fire_perimeter.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\n# Make dates into DateTime object\nca_fire_perimeter.alarm_date = pd.to_datetime(ca_fire_perimeter.alarm_date)\nca_fire_perimeter.cont_date = pd.to_datetime(ca_fire_perimeter.cont_date)\n\n\n\n\nHere, I will select for the Thomas Fire Boundary (2017), and save it as a new geospatial file.\n\n# Select Thomas Fire in 2017\nthomas_fire_boundary = ca_fire_perimeter[(ca_fire_perimeter['alarm_date'] &gt; '2016-12-31') & \n                                         (ca_fire_perimeter['alarm_date'] &lt; '2018-01-01') &\n                                         (ca_fire_perimeter['fire_name'] == 'THOMAS')]\n\n\n# View dataframe\nthomas_fire_boundary\n\n\n# Save dataframe as geospatial file in /data folder\nthomas_fire_boundary.to_file('data/thomas_fire_boundary.geojson', driver = 'GeoJSON')\n\nI chose to convert the alarm_date and cont_date variables into DateTime objects, and wanted them to retain that data type. As I would need to convert DateTime objects back into strings to save as shapefile, I chose to store the new data frame as a GeoJSON file. I have saved the data in the ‘data/’ folder common to this project."
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post.html#false-and-true-color-images",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post.html#false-and-true-color-images",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "In a new notebook, I have created a path to the Thomas Fire perimeter data saved in the previous step.\n\n\n\n# Set up file paths\nland_fp = os.path.join('data', 'landsat8-2018-01-26-sb-simplified.nc')\nthomas_fp = os.path.join('data', 'thomas_fire_boundary.geojson')\n\n# Import landsat data\nlandsat = rioxr.open_rasterio(land_fp)\n\n# Import Thomas Fire perimeter\nthomas_fire_perimeter = gpd.read_file(thomas_fp)\n\n\n\n\nIn this section we will take a preliminary look at the imported landsat data - in order to understand how to visualize it with respect to the Thomas Fire perimenter data.\n\n# View landsat\nlandsat\n\n\n# View landsat sizes\nlandsat.sizes\n\n\n# Landsat CRS\nlandsat.rio.crs\n\nThrough the exploration of the “landsat” xarray.Dataset, I have been able to notice the shape (5, 1, 731, 870) and the dimensions (x coordinates, y coordinates and 1 band). The data’s variables has 5 groups of information - red, green, blue, near infrared 08, and short wave infrared 22. The crs of the dataset is ESPG: 32611.\n\n\n\nIn this section, we will remove the band dimension of the Landsat data (as there is only 1).\n\n# Drop the band dimension of the data\nlandsat = landsat.squeeze()\n\n# Remove coordinates associated to band dimension\nlandsat = landsat.drop_vars('band')\n\n# Check new landsat dataset\nprint(landsat.dims, landsat.coords)\n\n\n\n\nIn this section, I will make some preliminary visuals of the landsat data. I will be making true and false color images.\n\n\n\n# Adjust the scale for plotting the bands for a true color image\nfig, ax = plt.subplots(figsize = (5, 5)) # Set up plot\n\n(landsat[['red', 'green', 'blue']]).to_array().plot.imshow(robust = True) # Plot Landsat True Color image\n\nax.set_title(\"Santa Barbara County (True Color Image)\")  # Add title\n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Show map\nplt.show()\n\n\n\n\n\n# Plot false color image\nfig, ax = plt.subplots(figsize = (5, 5)) # Set up plot\n\n(landsat[['swir22', 'nir08', 'red']]).to_array().plot.imshow(robust = True) # Plot landsat false color image\n\n# Add title\nax.set_title(\"Santa Barbara County (False Color Image)\") \n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Show map\nplt.show()\n\nNotice how, in the false color image, the area approximating the Thomas Fires are a orange-red color compared to the rest of the green in the county.\n\n\n\n\nIn this final section, we will create maps of Santa Barbara overlayed with the Thomas Fire perimeter data (that we obtained in the fire perimeter notebook).\n\n# Set CRS of landsat and thomas_fire_perimeter equivalent\nthomas_fire_perimeter = thomas_fire_perimeter.to_crs(crs = landsat.rio.crs)\n\n# Test if equivalencies true\nassert thomas_fire_perimeter.crs == landsat.rio.crs\n\n\n# Create bounding box for fire perimeters\nlandsat_bounded = landsat.rio.clip_box(*thomas_fire_perimeter.total_bounds)\n\n# Clip map to fire perimeter bounds\nfig, ax = plt.subplots(figsize = (10, 10)) # Setup plot\nlandsat_bounded[['swir22', 'nir08', 'red']].to_array().plot.imshow(ax = ax, robust = True) # Plot the landsat bands\n\nthomas_fire_perimeter.boundary.plot(ax = ax, edgecolor = '#5F0A11', linewidth = 2, label=\"Thomas Fire Boundary\") # Plot the thomas fire data on same plot\n\n# Add title\nax.set_title(\"Thomas Fire Burn Perimeter (2017) in Santa Barbara County (False Color Image)\")  \n\n# Set legend within map borders\nax.legend()\n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Set legend\nax.legend()\n\n# Show map\nplt.show()\n\n\n\nThe 2 maps in the “Map” portion of this notebook, shows Santa Barbara County with fase color imagery - which include short wave infrared, near infrared, and red bands. The 2017 Thomas Fire burn perimeter is outlined in dark red, on top of this false image map, and it also appears red inside the perimeter (because of the false color imaging). This is due to the fact that it highly reflects shortwave infared. The Thomas Fire started 12/4/2017 and was contained on 1/12/2018. This imagery is therefore taken shortly after the fire was contained, on 1/26/2018."
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post.html#references",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post.html#references",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "AQI Data : AirNow.gov, U.S. EPA. (n.d.-b). Aqi Basics. AQI Basics | AirNow.gov. https://www.airnow.gov/aqi/aqi-basics/\nThomas Fire Perimeter: Publisher CAL FIRE. (2024, May 14). State of California - california fire perimeters (all). Catalog. https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436\nAssignment Reference and Cleaned Landsat Data Access : Galaz-Garcia, C. (n.d.). Assignment 4. assignment4 – EDS 220 - Working with Environmental Datasets. https://meds-eds-220.github.io/MEDS-eds-220-course/assignments/assignment4.html\nLandsat Data: Microsoft Planetary Computer. Planetary Computer. (2018, January 12). https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2"
  },
  {
    "objectID": "posts/2024-12-13-statistics-final/heat_income_sanjose.html",
    "href": "posts/2024-12-13-statistics-final/heat_income_sanjose.html",
    "title": "Investigating Temperature and Income in San Jose",
    "section": "",
    "text": "Every year, around the months of July through to August, I have noticed an uptick in news articles and government advisories cautioning people about the dangers of increasingly frequent heat waves. (Heatwaves can cause health-related problems, like heat strokes, but it can also increase the burden on water, energy, and transportation services - causing blackouts and gridlock that further exacerbate the problem.) WHO - Heatwaves As a Bay Area native, and a burgeoning data scientist, with an interest in environmental justice, I wanted to explore the relationship between temperature, income, and location in the Bay Area. (This blog post is an extension of my final project presentation for grad school, for the course EDS222.)\nMy starting point was quite ambitious - especially for the time span I had allotted myself for this project. A mere 2 weeks! Gathering and cleaning data, creating code to process it, analyzing and visualizing the results - to look at incomes and temperatures around the entirety of the Bay Area was no small task. Furthermore, due to the inland spread of certain counties, like Alameda, inland, there were areas where there would naturally be higher temperatures that may skew the research. Thus, I decided to zoom in on the city of San Jose, in the South Bay.\nThrough this investigation, I pose multiple questions to try and get a holistic and introductory understanding of the relationship between temperature and median household income, in San Jose, during the years 2005 - 2009. According to MIT “While climate change afflicts the world on a global scale, a new study from Caltech finds that residents of low-income neighborhoods are bearing the brunt of the hotter temperatures.” Through data analysis, I wanted to observe if these assumptions held up in the specific area I was investigating."
  },
  {
    "objectID": "posts/2024-12-13-statistics-final/heat_income_sanjose.html#introduction",
    "href": "posts/2024-12-13-statistics-final/heat_income_sanjose.html#introduction",
    "title": "Investigating Temperature and Income in San Jose",
    "section": "",
    "text": "Every year, around the months of July through to August, I have noticed an uptick in news articles and government advisories cautioning people about the dangers of increasingly frequent heat waves. (Heatwaves can cause health-related problems, like heat strokes, but it can also increase the burden on water, energy, and transportation services - causing blackouts and gridlock that further exacerbate the problem.) WHO - Heatwaves As a Bay Area native, and a burgeoning data scientist, with an interest in environmental justice, I wanted to explore the relationship between temperature, income, and location in the Bay Area. (This blog post is an extension of my final project presentation for grad school, for the course EDS222.)\nMy starting point was quite ambitious - especially for the time span I had allotted myself for this project. A mere 2 weeks! Gathering and cleaning data, creating code to process it, analyzing and visualizing the results - to look at incomes and temperatures around the entirety of the Bay Area was no small task. Furthermore, due to the inland spread of certain counties, like Alameda, inland, there were areas where there would naturally be higher temperatures that may skew the research. Thus, I decided to zoom in on the city of San Jose, in the South Bay.\nThrough this investigation, I pose multiple questions to try and get a holistic and introductory understanding of the relationship between temperature and median household income, in San Jose, during the years 2005 - 2009. According to MIT “While climate change afflicts the world on a global scale, a new study from Caltech finds that residents of low-income neighborhoods are bearing the brunt of the hotter temperatures.” Through data analysis, I wanted to observe if these assumptions held up in the specific area I was investigating."
  },
  {
    "objectID": "posts/2024-12-13-statistics-final/heat_income_sanjose.html#data-cleaning",
    "href": "posts/2024-12-13-statistics-final/heat_income_sanjose.html#data-cleaning",
    "title": "Investigating Temperature and Income in San Jose",
    "section": "Data Cleaning",
    "text": "Data Cleaning\nTemperature data across the city of San Jose, was retrieved from the National Centers for Environmental Information, National Oceanic and Atmospheric Administration (NOAA). I utilised the climate data online tool, to pull local climatological data from my county of interest - Santa Clara. While there are a total of four stations in the area, the three stations I found the most promising in terms of recorded time range, location, and geographic relevance were the Moffett Federal Airfield, San Jose Mineta National Airport, and the Reid-Hillview Airport.\nThis was because there were three stations, quite nicely spread out on a diagonal diameter of the city, which allowed me to gather a temperature data I believed to be representative of a cross-section of the city. The time-range for the recorded historical temperatures included the time-range that I wanted to observe, 2009 - 2024.\nThe relevant temperature data was downloaded from the website, and was saved as three .csv’s to my local drive. After creating a new GitHub repository eds222_final_project, I cloned it to my IDE and uploaded the .csv’s to the data folder (already placed within the .gitignore of the repository.) I created a script that would clean the data available in data_clean.ipynb. In this process, the temperature data I thought most useful was the ‘HourlyDryBulbTemperature’. While there was ‘DailyMaximumDryBulbTemperature’ and ‘DailyMaximumWetBulbTemperature’ variables, it was not as consistent or as complete as the chosen variable. I further processed the .csv data in my R script temp_income_BA.qmd also available on the same GitHub repository. I selected the highest hourly temperature, per day, and was able to approximate the highest daily dry bulb temperature for the years 2009 - 2023 for all three stations.\nThe geographic shapefiles, for census tracts within Santa Clara County, were pulled from the TIGER/Shapeline files from the US Census Bureau. The shapefiles were uploaded to the data folder raw_data within the .gitignore. I used the census tract data for the years 2009, 2014, 2019, and 2023. This was to match the GEOIDs and areas of the appropriate American Community Survey 5-year data.\nFinally, I required median household income data, which I retrieved using the tidycensus package in R. I retrieved the American Community Survey 5-year data for the years 2005 - 2009, 2010 - 2014, 2015 - 2019, and 2019 - 2023."
  },
  {
    "objectID": "posts/2024-12-13-statistics-final/heat_income_sanjose.html#data-processing",
    "href": "posts/2024-12-13-statistics-final/heat_income_sanjose.html#data-processing",
    "title": "Investigating Temperature and Income in San Jose",
    "section": "Data Processing",
    "text": "Data Processing\nI will walk through a simplified framework of the code I created, for temperatures measured from the San Jose International Airport, 2009.\n\nImport temperature, census tract shapefile, and ACS income data.\n\n\n# import temp data\nsanjose &lt;- read.csv(here::here('raw_data','sanjose_temp.csv'))\n\n# import census shapefiles of santa clara county\nsanta_clara_geo_09 &lt;- sf::read_sf(here::here('raw_data','2009','tl_2009_06085_tract00.shp')) %&gt;%\n  mutate(GEOID = CTIDFP00) %&gt;%\n  subset(., select = - CTIDFP00)\n\n# Match census tract with 5 year ACS of median income in the years \nnine_income &lt;- get_acs(geography = 'tract',\n                  variables = \"B19013_001E\",\n                  state = \"CA\",\n                  county = 'Santa Clara',\n                  year = 2009)\n\n# Select GEOID and median income estimate for ACS dataframe\nnine_income &lt;- nine_income[c('GEOID','estimate')]\n\n\nCreate a point from the station location, matching it to the census tract CRS. Find the census tracts the buffer intersects with.\n\n\nsanjose_df &lt;- data.table(\n                 place=c(\"San Jose\"),\n                 longitude=c(-121.92795137054253),\n                 latitude=c(37.36852024984821))\n\nsanjose_sf = st_as_sf(sanjose_df, coords = c(\"longitude\", \"latitude\"), \n                 crs = st_crs(santa_clara_geo_09), agr = \"constant\")\n\n# use intersect to find census tracts within 2 mile radius of temperature sensing points\nsanjose_buffer &lt;- st_buffer(sanjose_sf, 4500)\n\n# Find census tracts that intersect with buffer zones\nsanjose_censustract_09 &lt;- st_intersection(sanjose_buffer, santa_clara_geo_09)\n\n\n\n\nBuffered census tracts around the three stations\n\n\n\nJoin your appropriate income table to the census tract - to the buffered census tracts. This will find the median income per census tract in the buffered zone around the station. Find the mean of the median incomes for the selected years. (Given the time constraints, I assumed that the income variable would be applicable to a five year time period (e.g. the mean of the 2014 ACS median household income would be applied to the years of 2010 to 2014.))\n\n\n# Find census tracts that intersect with buffer zones\nsanjose_income_09 &lt;- left_join(sanjose_censustract_09, nine_income, by = 'GEOID') %&gt;%\n  subset(., select = c(place, estimate)) %&gt;%\n  st_drop_geometry()\n\nsanjose_income_09_mean &lt;- mean(sanjose_income_09$estimate)\n\n\nFinally, add mean, median incomes to your finished data frame containing station, year, maximum daily temperature, whether the maximum was over 90 degrees Farenheit, and mean, median income. Repeat for all stations over all selected census years - to create the following:\n\n\n\n\nFinal dataframe of variables for analysis"
  },
  {
    "objectID": "posts/2024-12-13-statistics-final/heat_income_sanjose.html#data-visualization-and-analysis",
    "href": "posts/2024-12-13-statistics-final/heat_income_sanjose.html#data-visualization-and-analysis",
    "title": "Investigating Temperature and Income in San Jose",
    "section": "Data Visualization and Analysis",
    "text": "Data Visualization and Analysis\n\nMaximum Daily Temperature Data Distribution\nLet’s take an initial look into our temperature data by station, for the years 2009 to 2023.\n\n\n\nDistributions of temperature data\n\n\nThe above histograms show the frequency distribution of the maximum daily temperature (in degrees Farenheit) for the San Jose Mineta International Airport, Moffett Federal Airfield, and Reid-Hillview Aiport - between the years 2009 and 2023. The distributions seem to be fairly symmetrical and unimodal.\n\n\nProportion of Hot Days by Location\nHere we we will visualize the proportion of days, by station, that were recorded to be equal to or greater than 90 degrees Farenheit.\n\n\n\nProportion of hot days by station\n\n\nWe will use a Pearson’s chi-square test, to analyse the whether the frequency of hot days are similar or different in the three locations. Our test fits all the assumptions of a chi-square test: ” … test a hypothesis about one or more categorical variables. …The sample was randomly selected from the population. There are a minimum of five observations expected in each group or combination of groups.” Scribber\n\nHypothesis\nH0: The proportion of days of 90 degrees Celsius or higher, measured at San Jose, Moffett and Reid-Hill from 2009 - 2023, are the same.\nHA: The proportion of days of 90 degrees Celsius or higher, measured at San Jose, Moffett and Reid-Hill from 2009 - 2023, are different.\n\n\nCreate Table\n\n\n\nChi squared table for test\n\n\n\n\nChi-Squred Test Result\n\n\n\nChi Squared test result\n\n\nAssuming an alpha of 0.05, as the calculated p-value is less, there is strong evidence that we can reject the null hypothesis.\n\n\n\nMean Income and Station Location\nPerform a hypothesis test by randomization to investigate whether mean incomes vary by location.\n\n\n\nDistribution of mean, median incomes by location\n\n\nH0: There is no difference between the mean incomes of the reid-hill and moffett census tracts.\nHA: There is a difference between the mean incomes of the reid-hill and moffett census tracts.\nUse randomization to simulate the distribution of the sample statistic under the null hypothesis.\n\n\n\nSample Statistic under Null Hypothesis\n\n\nUnder this randomization test, our calculated p-value is 0. As it is lower than our assumed alpha of 0.05, we can assume that there is strong evidence that we can reject the null hypothesis."
  },
  {
    "objectID": "posts/2024-12-13-statistics-final/heat_income_sanjose.html#conclusion-bias-and-limitations",
    "href": "posts/2024-12-13-statistics-final/heat_income_sanjose.html#conclusion-bias-and-limitations",
    "title": "Investigating Temperature and Income in San Jose",
    "section": "Conclusion, Bias, and Limitations",
    "text": "Conclusion, Bias, and Limitations\nThrough this preliminary investigation, we have drawn the conclusion that there is a significant difference in the number of days where the maximum daily temperature are equal to or greater than 90 degrees Fahrenheit, by station - over the years 2009 to 2023. We have also concluded that there is a difference in the means of the median incomes in the census tracts surrounding the temperature sensing stations in a circular zone - with a radius of 4500 m.\nNext steps I would like to take, to further explore the relationship between temperature and income in San Jose, would be to create a regression model function that may explain the interaction more directly. However, I would need more robust median income data (e.g. median income date for all years from 2009 to 2023). I would also like to see the temporal relationship between median income and maximum daily temperature, to see if the course of these interactions over the time-period desired.\nLimitations I encountered, whilst working on this project, were hard timelines and data availability. Due to the timeline of this project, I narrowed my scope as well as made the decision to not have as a robust dataset as I would have ideally liked - for cenusus tract median income. I would have also preferred to have a couple more locations, that recorded the daily maximum temperature, around the city of San Jose.\nThese external and internal limitations will have caused bias impacts upon the dataset. As San Jose temperature monitors showed the temperature of a nice cross-section of the city and was documented well, it played a roled into why I chose this location for study. I have also had previous knowledge of the disparities in income, spatially, through the Climate and Economic Justice Screening Tool. Thus, at the very least availability and confirmation bias are present in my analysis.\nThis project and the subsequent results have definitely increased my interest in the subject and I would like to improve and build upon this framework for future research. I would also like to expand this study, in order to get a better sense of the correlation of median income and maximum daily temperatures in the wider Bay Area. I would also like to investigate whether it’s the chicken or the egg: Do areas with higher incomes tend to have cooler ambient temperatures due to investment in cooling infrastructure and green space urban planning or do more affluent neighborhoods tend to be built in cooler areas? Are there historical redlining impacts that cause low income communities to tend to be in hotter areas of cities/counties? Looking at remotely sensed data, it does appear that there are widespread race and class disparities in urban surface heat temperatures Benz, S. A., & Burney, J. A. (2021) How can we mitigate heat-factors to most effectively help elderly communities, BIPOC, and rural areas?"
  },
  {
    "objectID": "posts/2024-12-13-statistics-final/heat_income_sanjose.html#text-references",
    "href": "posts/2024-12-13-statistics-final/heat_income_sanjose.html#text-references",
    "title": "Investigating Temperature and Income in San Jose",
    "section": "Text References",
    "text": "Text References"
  },
  {
    "objectID": "posts/2024-12-13-statistics-final/heat_income_sanjose.html#data-access",
    "href": "posts/2024-12-13-statistics-final/heat_income_sanjose.html#data-access",
    "title": "Investigating Temperature and Income in San Jose",
    "section": "Data Access",
    "text": "Data Access\nAll data required to run the code is placed in the /data and /raw_data folder, in the .gitignore of the repo.\nIf you would prefer to choose your own locations or personally download the data to your server please refer to the following citations:\nNOAA Local Climatological Data: National Centers for Environmental Information (NCEI). (n.d.). Local Climatological Data (LCD) | Data Tools | Climate Data Online (CDO) | National Climatic Data Center (NCDC). Climate Data Online (CDO). https://www.ncei.noaa.gov/cdo-web/datatools/lcd\nCensus Tract Shapefiles: US Census Bureau. (2024, October 9). TIGER/Line shapefiles. Census.gov. https://www.ncei.noaa.gov/cdo-web/datatools/lcd\nMedian Income from Tidycensus: Walker K, Herman M (2024). tidycensus: Load US Census Boundary and Attribute Data as ‘tidyverse’ and ‘sf’-Ready Data Frames. R package version 1.6.6, https://www.ncei.noaa.gov/cdo-web/datatools/lcd."
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-2.html#about",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-2.html#about",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "The Santa Barbara Thomas Fre “… burned approximately 281,893 acres (440 sq mi; 114,078 ha) before being fully contained on January 12, 2018, making it the largest wildfire in modern California history at the time.”Wikipedia It was hugely detrimental to the impacted areas, economically and environmentally.\nThe purpose of this blogpost is to explore and visualize the impacts of the Santa Barbara Thomas Fire. In this post we will cover the impact the wildfire had on the air quality index of the surrounding area as well as the burn scar it produced.\nThe Air Quality Index (AQI) is a tool for reporting daily air quality. It tells you how clean or polluted your air is and what associated health effects might be a concern for you. Health effects can include negative long-term health impacts like “heart or lung disease, asthma attacks, heart attacks, irregular heartbeat, decreased lung function, and increased respiratory symptoms, such as irritation of the airways, coughing or difficulty breathing” as cited in EPA.gov - EJScreen .\nThe visualization of the Thomas Fire burn scar allows us to see the preliminary impact the fire had on infrastructures, ecosystems, and communities - through its size, shape, and location.\n\n\n\nThe AQI analysis portion of the project introduced me to working with fundamental python data cleaning tools, the DateTime module, as well as graph creation. The latter portion allowed me to try my hand with working with satellite data, false and true colour imagery creation, and map creation.\n\n\n\nLandsat Data: This contains red, green, blue, near-infrared and shortwave infrared bands from the Landsat Collection 2 Level-2, collected by the Landsat 8 satellite. The data was retrieved from the Microsoft Planetary Computer data catalogue and pre-processed to remove data outside land and coarsen the spatial resolution.\nCitation: Microsoft Planetary Computer. Planetary Computer. (2018, January 12). https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2\nThomas Fire Perimeter Data: This dataset was published and maintained by CAL FIRE, but accessed through Data.gov. The statewide fire history geospatial dataset is updated annually from the previous fire season, during spring, from units across the state and cooperating agencies.\nCitation: Publisher CAL FIRE. (2024, May 14). State of California - california fire perimeters (all). Catalog. https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436\nAir Quality Index (AQI): This dataset is sourced from the EPA’s AirData tool. These files are updated twice per year and is calculated daily for each monitor for the Criteria Gases and PM10 and PM2.5. For this analysis, I will use daily AQI data for 2017 and 2018.\nCitation: Environmental Protection Agency AirData (2024), Daily AQI by County [Data Set] Available from: https://www.epa.gov/outdoor-air-quality-data/download-daily-data. Access date: October 20, 2024.\n\n\n\nThis repository was created as the second and fourth assignments for the graduate course EDS 220: Working with Environmental Datasets in the Masters of Environmental Data Science (MEDS) program, taught by Dr. Carmen Galaz García.\n\n\n\nGitHub Link"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-2.html#import-libraries",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-2.html#import-libraries",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "Importing all relevant libraries - for all excersizes in this blog post.\n\n# Import Libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport rioxarray as rioxr"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-2.html#air-quality-index-analysis",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-2.html#air-quality-index-analysis",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "In this section I will be plotting the daily AQI as well as 5-day average AQI from 2017-2018. First, I’ll read in the data and clean the column namees for easier handling.\n\n# Read in data\naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip', compression = 'zip')\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip', compression = 'zip')\n\n# Concatenate both dataframes\naqi = pd.concat([aqi_17, aqi_18])\n\n# Simplify column names\naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\nI’ll then filter the data for AQI representative of Santa Barbara county only.\n\n# Create filter Santa Barbara df with dropped columns\naqi_sb = aqi[aqi['county_name'] == 'Santa Barbara']\naqi_sb = aqi_sb.drop(columns = ['state_name','county_name','state_code','county_code'], axis = 1)\n               \n# Change 'date' to datetime and set to index\naqi_sb.date = pd.to_datetime(aqi_sb['date'])\naqi_sb = aqi_sb.set_index('date')\n\nWe will use rolling averages to visualize short-term temporal trends. As my datetime column already has the day, I can use the pandas.DataFrame.rolling() method to get the average AQI within a 5 day window.\n\n\n\n\n# Calculate AQI rolling average over 5 days\nrolling_average = aqi_sb['aqi'].rolling('5D').mean()\n               \n# Create column with new variable 'rolling_variable'\naqi_sb['five_day_average'] = rolling_average\n\nFinally I’ll create a plot with the daily and five day average AI for Santa Barbara. This will give us a good understanding of how the AQI was impacted - in large part due to the Thomas Fire.\n\n\n\n\n# Initialize figure\nfig, ax = plt.subplots(figsize=(9,5))\n\n# Add daily and 5-day average AQI\naqi_sb.five_day_average.plot(ax=ax, color = 'orange', zorder = 3)\naqi_sb.aqi.plot(ax=ax, color = 'cornflowerblue', zorder = 2)\n\n# Update axis labels and title\nplt.xlabel('Date')\nplt.ylabel('AQI')\nplt.title('AQI during the 2017 Thomas Fire in Santa Barbara County')\n\n# Add legend\nax.legend(labels = ['Daily AQI', '5-day average AQI'])\n\nplt.show()"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-2.html#fire-perimeter-data-retrieval-and-selection",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-2.html#fire-perimeter-data-retrieval-and-selection",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "# Display all columns when looking at dataframes\npd.set_option(\"display.max.columns\", None)\n\n\n# Create data filepath\nfp = os.path.join('data','California_Fire_Perimeters_(all).shp')\n\n# Create dataframe for CA fire perimeter shapefile\nca_fire_perimeter = gpd.read_file(fp)\n\n\n\n\nIn this section we will take a preliminary look at the imported fire perimeter data - in order to understand how to extract the Thomas Fire perimenter data.\n\n# Check dataframe head\nca_fire_perimeter.head(3)\n\n\n\n\n\n\n\n\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nALARM_DATE\nCONT_DATE\nCAUSE\nC_METHOD\nOBJECTIVE\nGIS_ACRES\nCOMMENTS\nCOMPLEX_NA\nIRWINID\nFIRE_NUM\nCOMPLEX_ID\nDECADES\ngeometry\n\n\n\n\n0\n2023\nCA\nCDF\nSKU\nWHITWORTH\n00004808\n2023-06-17\n2023-06-17\n5\n1\n1\n5.72913\nNone\nNone\n{7985848C-0AC2-4BA4-8F0E-29F778652E61}\nNone\nNone\n2020\nPOLYGON ((-13682443.000 5091132.739, -13682445...\n\n\n1\n2023\nCA\nLRA\nBTU\nKAISER\n00010225\n2023-06-02\n2023-06-02\n5\n1\n1\n13.60240\nNone\nNone\n{43EBCC88-B3AC-48EB-8EF5-417FE0939CCF}\nNone\nNone\n2020\nPOLYGON ((-13576727.142 4841226.161, -13576726...\n\n\n2\n2023\nCA\nCDF\nAEU\nJACKSON\n00017640\n2023-07-01\n2023-07-02\n2\n1\n1\n27.81450\nNone\nNone\n{B64E1355-BF1D-441A-95D0-BC1FBB93483B}\nNone\nNone\n2020\nPOLYGON ((-13459243.000 4621236.000, -13458968...\n\n\n\n\n\n\n\n\n# Check CRS - and type\nca_fire_perimeter.crs\n\n&lt;Projected CRS: EPSG:3857&gt;\nName: WGS 84 / Pseudo-Mercator\nAxis Info [cartesian]:\n- X[east]: Easting (metre)\n- Y[north]: Northing (metre)\nArea of Use:\n- name: World between 85.06°S and 85.06°N.\n- bounds: (-180.0, -85.06, 180.0, 85.06)\nCoordinate Operation:\n- name: Popular Visualisation Pseudo-Mercator\n- method: Popular Visualisation Pseudo Mercator\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\nAfter the exploration of the California perimeter shape file, imported into this notebook, I see that is has 22,260 fire perimeter observations with columns for varied descriptive markers including: year, fire name, alarm date, and geometery. I observe that some of the column data types int64 and float64, however, I may want to change the date columns into datetime objects for manipulation. The CRS of this shapefile is a projected coordinate reference system, EPSG: 3857 and is a popular crs for web mapping services.\n\n\n\nNext, I will clean the data for easier data manipulation.\n\n# Simplify column names by replacing spaces and no capitilization\nca_fire_perimeter.columns = (ca_fire_perimeter.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\n# Make dates into DateTime object\nca_fire_perimeter.alarm_date = pd.to_datetime(ca_fire_perimeter.alarm_date)\nca_fire_perimeter.cont_date = pd.to_datetime(ca_fire_perimeter.cont_date)\n\n\n\n\nHere, I will select for the Thomas Fire Boundary (2017), and save it as a new geospatial file.\n\n# Select Thomas Fire in 2017\nthomas_fire_boundary = ca_fire_perimeter[(ca_fire_perimeter['alarm_date'] &gt; '2016-12-31') & \n                                         (ca_fire_perimeter['alarm_date'] &lt; '2018-01-01') &\n                                         (ca_fire_perimeter['fire_name'] == 'THOMAS')]\n\n\n# View dataframe\nthomas_fire_boundary\n\n\n\n\n\n\n\n\nyear_\nstate\nagency\nunit_id\nfire_name\ninc_num\nalarm_date\ncont_date\ncause\nc_method\nobjective\ngis_acres\ncomments\ncomplex_na\nirwinid\nfire_num\ncomplex_id\ndecades\ngeometry\n\n\n\n\n2654\n2017\nCA\nUSF\nVNC\nTHOMAS\n00003583\n2017-12-04\n2018-01-12\n9\n7\n1\n281791.0\nCONT_DATE based on Inciweb\nNone\nNone\nNone\nNone\n2010\nMULTIPOLYGON (((-13316089.016 4088553.040, -13...\n\n\n\n\n\n\n\n\n# Save dataframe as geospatial file in /data folder\nthomas_fire_boundary.to_file('data/thomas_fire_boundary.geojson', driver = 'GeoJSON')\n\nI chose to convert the alarm_date and cont_date variables into DateTime objects, and wanted them to retain that data type. As I would need to convert DateTime objects back into strings to save as shapefile, I chose to store the new data frame as a GeoJSON file. I have saved the data in the ‘data/’ folder common to this project."
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-2.html#false-and-true-color-images",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-2.html#false-and-true-color-images",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "In a new notebook, I have created a path to the Thomas Fire perimeter data saved in the previous step.\n\n\n\n# Set up file paths\nland_fp = os.path.join('data', 'landsat8-2018-01-26-sb-simplified.nc')\nthomas_fp = os.path.join('data', 'thomas_fire_boundary.geojson')\n\n# Import landsat data\nlandsat = rioxr.open_rasterio(land_fp)\n\n# Import Thomas Fire perimeter\nthomas_fire_perimeter = gpd.read_file(thomas_fp)\n\n\n\n\nIn this section we will take a preliminary look at the imported landsat data - in order to understand how to visualize it with respect to the Thomas Fire perimenter data.\n\n# View landsat\nlandsat\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870, band: 1)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * band         (band) int64 1\n    spatial_ref  int64 0\nData variables:\n    red          (band, y, x) float64 ...\n    green        (band, y, x) float64 ...\n    blue         (band, y, x) float64 ...\n    nir08        (band, y, x) float64 ...\n    swir22       (band, y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870band: 1Coordinates: (4)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])band(band)int641array([1])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\n\n# View landsat sizes\nlandsat.sizes\n\nFrozen({'y': 731, 'x': 870, 'band': 1})\n\n\n\n# Landsat CRS\nlandsat.rio.crs\n\nCRS.from_epsg(32611)\n\n\nThrough the exploration of the “landsat” xarray.Dataset, I have been able to notice the shape (5, 1, 731, 870) and the dimensions (x coordinates, y coordinates and 1 band). The data’s variables has 5 groups of information - red, green, blue, near infrared 08, and short wave infrared 22. The crs of the dataset is ESPG: 32611.\n\n\n\nIn this section, we will remove the band dimension of the Landsat data (as there is only 1).\n\n# Drop the band dimension of the data\nlandsat = landsat.squeeze()\n\n# Remove coordinates associated to band dimension\nlandsat = landsat.drop_vars('band')\n\n# Check new landsat dataset\nprint(landsat.dims, landsat.coords)\n\nFrozen({'y': 731, 'x': 870}) Coordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n    spatial_ref  int64 0\n\n\n\n\n\nIn this section, I will make some preliminary visuals of the landsat data. I will be making true and false color images.\n\n\n\n# Adjust the scale for plotting the bands for a true color image\nfig, ax = plt.subplots(figsize = (5, 5)) # Set up plot\n\n(landsat[['red', 'green', 'blue']]).to_array().plot.imshow(robust = True) # Plot Landsat True Color image\n\nax.set_title(\"Santa Barbara County (True Color Image)\")  # Add title\n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Show map\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n# Plot false color image\nfig, ax = plt.subplots(figsize = (5, 5)) # Set up plot\n\n(landsat[['swir22', 'nir08', 'red']]).to_array().plot.imshow(robust = True) # Plot landsat false color image\n\n# Add title\nax.set_title(\"Santa Barbara County (False Color Image)\") \n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Show map\nplt.show()\n\n\n\n\n\n\n\n\nNotice how, in the false color image, the area approximating the Thomas Fires are a orange-red color compared to the rest of the green in the county.\n\n\n\n\nIn this final section, we will create maps of Santa Barbara overlayed with the Thomas Fire perimeter data (that we obtained in the fire perimeter notebook).\n\n# Set CRS of landsat and thomas_fire_perimeter equivalent\nthomas_fire_perimeter = thomas_fire_perimeter.to_crs(crs = landsat.rio.crs)\n\n# Test if equivalencies true\nassert thomas_fire_perimeter.crs == landsat.rio.crs\n\n\n# Create bounding box for fire perimeters\nlandsat_bounded = landsat.rio.clip_box(*thomas_fire_perimeter.total_bounds)\n\n# Clip map to fire perimeter bounds\nfig, ax = plt.subplots(figsize = (10, 10)) # Setup plot\nlandsat_bounded[['swir22', 'nir08', 'red']].to_array().plot.imshow(ax = ax, robust = True) # Plot the landsat bands\n\nthomas_fire_perimeter.boundary.plot(ax = ax, edgecolor = '#5F0A11', linewidth = 2, label=\"Thomas Fire Boundary\") # Plot the thomas fire data on same plot\n\n# Add title\nax.set_title(\"Thomas Fire Burn Perimeter (2017) in Santa Barbara County (False Color Image)\")  \n\n# Set legend within map borders\nax.legend()\n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Set legend\nax.legend()\n\n# Show map\nplt.show()\n\n\n\n\n\n\n\n\n\n\nThe 2 maps in the “Map” portion of this notebook, shows Santa Barbara County with fase color imagery - which include short wave infrared, near infrared, and red bands. The 2017 Thomas Fire burn perimeter is outlined in dark red, on top of this false image map, and it also appears red inside the perimeter (because of the false color imaging). This is due to the fact that it highly reflects shortwave infared. The Thomas Fire started 12/4/2017 and was contained on 1/12/2018. This imagery is therefore taken shortly after the fire was contained, on 1/26/2018."
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post.html#about",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post.html#about",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "The purpose of this blogpost is to show the exploration and visualization of the impacts of the Santa Barbara Thomas Fire (2017). In this post we will cover the impact the wildfire had on the air quality index of the surrounding area as well as the burn scar it produced.\nThe Air Quality Index (AQI) is a tool for reporting daily air quality. It tells you how clean or polluted your air is and what associated health effects might be a concern for you. Health effects can include negative long-term health impacts like “heart or lung disease, asthma attacks, heart attacks, irregular heartbeat, decreased lung function, and increased respiratory symptoms, such as irritation of the airways, coughing or difficulty breathing” as cited in EPA.gov - EJScreen .\nThe visualization of the Thomas Fire burn scar allows us to see the preliminary impact the fire had on infrastructures, ecosystems, and communities - through its size, shape, and location.\n\n\n\nThe AQI analysis portion of the project introduced me to working with fundamental python data cleaning tools, the DateTime module, as well as graph creation. The latter portion allowed me to try my hand with working with satellite data, false and true colour imagery creation, and map creation.\n\n\n\nLandsat Data: This contains red, green, blue, near-infrared and shortwave infrared bands from the Landsat Collection 2 Level-2, collected by the Landsat 8 satellite. The data was retrieved from the Microsoft Planetary Computer data catalogue and pre-processed to remove data outside land and coarsen the spatial resolution.\nCitation: Microsoft Planetary Computer. Planetary Computer. (2018, January 12). https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2\nThomas Fire Perimeter Data: This dataset was published and maintained by CAL FIRE, but accessed through Data.gov. The statewide fire history geospatial dataset is updated annually from the previous fire season, during spring, from units across the state and cooperating agencies.\nCitation: Publisher CAL FIRE. (2024, May 14). State of California - california fire perimeters (all). Catalog. https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436\nAir Quality Index (AQI): This dataset is sourced from the EPA’s AirData tool. These files are updated twice per year and is calculated daily for each monitor for the Criteria Gases and PM10 and PM2.5. For this analysis, I will use daily AQI data for 2017 and 2018.\nCitation: Environmental Protection Agency AirData (2024), Daily AQI by County [Data Set] Available from: https://www.epa.gov/outdoor-air-quality-data/download-daily-data. Access date: October 20, 2024.\n\n\n\nThis repository was created as the second and fourth assignments for the graduate course EDS 220: Working with Environmental Datasets in the Masters of Environmental Data Science (MEDS) program, taught by Dr. Carmen Galaz García.\n\n\n\nGitHub Link"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-3.html",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-3.html",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "The Thomas fire burns through Los Padres National Forest near Ojai, Calif., on Friday, Dec. 8, 2017. (AP Photo/Noah Berger)source\n\n\n\n\nThe Santa Barbara Thomas Fre “… burned approximately 281,893 acres (440 sq mi; 114,078 ha) before being fully contained on January 12, 2018, making it the largest wildfire in modern California history at the time.”Wikipedia It was hugely detrimental to the impacted areas, economically and environmentally.\nThe purpose of this blogpost is to explore and visualize the impacts of the Santa Barbara Thomas Fire. In this post we will cover the impact the wildfire had on the air quality index of the surrounding area as well as the burn scar it produced.\nThe Air Quality Index (AQI) is a tool for reporting daily air quality. It tells you how clean or polluted your air is and what associated health effects might be a concern for you. Health effects can include negative long-term health impacts like “heart or lung disease, asthma attacks, heart attacks, irregular heartbeat, decreased lung function, and increased respiratory symptoms, such as irritation of the airways, coughing or difficulty breathing” as cited in EPA.gov - EJScreen .\nThe visualization of the Thomas Fire burn scar allows us to see the preliminary impact the fire had on infrastructures, ecosystems, and communities - through its size, shape, and location.\n\n\n\nThe AQI analysis portion of the project introduced me to working with fundamental python data cleaning tools, the DateTime module, as well as graph creation. The latter portion allowed me to try my hand with working with satellite data, false and true colour imagery creation, and map creation.\n\n\n\nLandsat Data: This contains red, green, blue, near-infrared and shortwave infrared bands from the Landsat Collection 2 Level-2, collected by the Landsat 8 satellite. The data was retrieved from the Microsoft Planetary Computer data catalogue and pre-processed to remove data outside land and coarsen the spatial resolution.\nCitation: Microsoft Planetary Computer. Planetary Computer. (2018, January 12). https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2\nThomas Fire Perimeter Data: This dataset was published and maintained by CAL FIRE, but accessed through Data.gov. The statewide fire history geospatial dataset is updated annually from the previous fire season, during spring, from units across the state and cooperating agencies.\nCitation: Publisher CAL FIRE. (2024, May 14). State of California - california fire perimeters (all). Catalog. https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436\nAir Quality Index (AQI): This dataset is sourced from the EPA’s AirData tool. These files are updated twice per year and is calculated daily for each monitor for the Criteria Gases and PM10 and PM2.5. For this analysis, I will use daily AQI data for 2017 and 2018.\nCitation: Environmental Protection Agency AirData (2024), Daily AQI by County [Data Set] Available from: https://www.epa.gov/outdoor-air-quality-data/download-daily-data. Access date: October 20, 2024.\n\n\n\nThis repository was created as the second and fourth assignments for the graduate course EDS 220: Working with Environmental Datasets in the Masters of Environmental Data Science (MEDS) program, taught by Dr. Carmen Galaz García.\n\n\n\nGitHub Link\n\n\n\n\nImporting all relevant libraries - for all excersizes in this blog post.\n\n# Import Libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport rioxarray as rioxr\n\n\n\n\n\n\nIn this section I will be plotting the daily AQI as well as 5-day average AQI from 2017-2018. First, I’ll read in the data and clean the column namees for easier handling.\n\n# Read in data\naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip', compression = 'zip')\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip', compression = 'zip')\n\n# Concatenate both dataframes\naqi = pd.concat([aqi_17, aqi_18])\n\n# Simplify column names\naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\nI’ll then filter the data for AQI representative of Santa Barbara county only.\n\n# Create filter Santa Barbara df with dropped columns\naqi_sb = aqi[aqi['county_name'] == 'Santa Barbara']\naqi_sb = aqi_sb.drop(columns = ['state_name','county_name','state_code','county_code'], axis = 1)\n               \n# Change 'date' to datetime and set to index\naqi_sb.date = pd.to_datetime(aqi_sb['date'])\naqi_sb = aqi_sb.set_index('date')\n\nWe will use rolling averages to visualize short-term temporal trends. As my datetime column already has the day, I can use the pandas.DataFrame.rolling() method to get the average AQI within a 5 day window.\n\n\n\n\n# Calculate AQI rolling average over 5 days\nrolling_average = aqi_sb['aqi'].rolling('5D').mean()\n               \n# Create column with new variable 'rolling_variable'\naqi_sb['five_day_average'] = rolling_average\n\nFinally I’ll create a plot with the daily and five day average AI for Santa Barbara. This will give us a good understanding of how the AQI was impacted - in large part due to the Thomas Fire.\n\n\n\n\n# Initialize figure\nfig, ax = plt.subplots(figsize=(9,5))\n\n# Add daily and 5-day average AQI\naqi_sb.five_day_average.plot(ax=ax, color = 'orange', zorder = 3)\naqi_sb.aqi.plot(ax=ax, color = 'cornflowerblue', zorder = 2)\n\n# Update axis labels and title\nplt.xlabel('Date')\nplt.ylabel('AQI')\nplt.title('AQI during the 2017 Thomas Fire in Santa Barbara County')\n\n# Add legend\nax.legend(labels = ['Daily AQI', '5-day average AQI'])\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Display all columns when looking at dataframes\npd.set_option(\"display.max.columns\", None)\n\n\n# Create data filepath\nfp = os.path.join('data','California_Fire_Perimeters_(all).shp')\n\n# Create dataframe for CA fire perimeter shapefile\nca_fire_perimeter = gpd.read_file(fp)\n\n\n\n\nIn this section we will take a preliminary look at the imported fire perimeter data - in order to understand how to extract the Thomas Fire perimenter data.\n\n# Check dataframe head\nca_fire_perimeter.head(3)\n\n\n\n\n\n\n\n\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nALARM_DATE\nCONT_DATE\nCAUSE\nC_METHOD\nOBJECTIVE\nGIS_ACRES\nCOMMENTS\nCOMPLEX_NA\nIRWINID\nFIRE_NUM\nCOMPLEX_ID\nDECADES\ngeometry\n\n\n\n\n0\n2023\nCA\nCDF\nSKU\nWHITWORTH\n00004808\n2023-06-17\n2023-06-17\n5\n1\n1\n5.72913\nNone\nNone\n{7985848C-0AC2-4BA4-8F0E-29F778652E61}\nNone\nNone\n2020\nPOLYGON ((-13682443.000 5091132.739, -13682445...\n\n\n1\n2023\nCA\nLRA\nBTU\nKAISER\n00010225\n2023-06-02\n2023-06-02\n5\n1\n1\n13.60240\nNone\nNone\n{43EBCC88-B3AC-48EB-8EF5-417FE0939CCF}\nNone\nNone\n2020\nPOLYGON ((-13576727.142 4841226.161, -13576726...\n\n\n2\n2023\nCA\nCDF\nAEU\nJACKSON\n00017640\n2023-07-01\n2023-07-02\n2\n1\n1\n27.81450\nNone\nNone\n{B64E1355-BF1D-441A-95D0-BC1FBB93483B}\nNone\nNone\n2020\nPOLYGON ((-13459243.000 4621236.000, -13458968...\n\n\n\n\n\n\n\n\n# Check CRS - and type\nca_fire_perimeter.crs\n\n&lt;Projected CRS: EPSG:3857&gt;\nName: WGS 84 / Pseudo-Mercator\nAxis Info [cartesian]:\n- X[east]: Easting (metre)\n- Y[north]: Northing (metre)\nArea of Use:\n- name: World between 85.06°S and 85.06°N.\n- bounds: (-180.0, -85.06, 180.0, 85.06)\nCoordinate Operation:\n- name: Popular Visualisation Pseudo-Mercator\n- method: Popular Visualisation Pseudo Mercator\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\nAfter the exploration of the California perimeter shape file, imported into this notebook, I see that is has 22,260 fire perimeter observations with columns for varied descriptive markers including: year, fire name, alarm date, and geometery. I observe that some of the column data types int64 and float64, however, I may want to change the date columns into datetime objects for manipulation. The CRS of this shapefile is a projected coordinate reference system, EPSG: 3857 and is a popular crs for web mapping services.\n\n\n\nNext, I will clean the data for easier data manipulation.\n\n# Simplify column names by replacing spaces and no capitilization\nca_fire_perimeter.columns = (ca_fire_perimeter.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\n# Make dates into DateTime object\nca_fire_perimeter.alarm_date = pd.to_datetime(ca_fire_perimeter.alarm_date)\nca_fire_perimeter.cont_date = pd.to_datetime(ca_fire_perimeter.cont_date)\n\n\n\n\nHere, I will select for the Thomas Fire Boundary (2017), and save it as a new geospatial file.\n\n# Select Thomas Fire in 2017\nthomas_fire_boundary = ca_fire_perimeter[(ca_fire_perimeter['alarm_date'] &gt; '2016-12-31') & \n                                         (ca_fire_perimeter['alarm_date'] &lt; '2018-01-01') &\n                                         (ca_fire_perimeter['fire_name'] == 'THOMAS')]\n\n\n# View dataframe\nthomas_fire_boundary\n\n\n\n\n\n\n\n\nyear_\nstate\nagency\nunit_id\nfire_name\ninc_num\nalarm_date\ncont_date\ncause\nc_method\nobjective\ngis_acres\ncomments\ncomplex_na\nirwinid\nfire_num\ncomplex_id\ndecades\ngeometry\n\n\n\n\n2654\n2017\nCA\nUSF\nVNC\nTHOMAS\n00003583\n2017-12-04\n2018-01-12\n9\n7\n1\n281791.0\nCONT_DATE based on Inciweb\nNone\nNone\nNone\nNone\n2010\nMULTIPOLYGON (((-13316089.016 4088553.040, -13...\n\n\n\n\n\n\n\n\n# Save dataframe as geospatial file in /data folder\nthomas_fire_boundary.to_file('data/thomas_fire_boundary.geojson', driver = 'GeoJSON')\n\nI chose to convert the alarm_date and cont_date variables into DateTime objects, and wanted them to retain that data type. As I would need to convert DateTime objects back into strings to save as shapefile, I chose to store the new data frame as a GeoJSON file. I have saved the data in the ‘data/’ folder common to this project.\n\n\n\n\n\nIn a new notebook, I have created a path to the Thomas Fire perimeter data saved in the previous step.\n\n\n\n# Set up file paths\nland_fp = os.path.join('data', 'landsat8-2018-01-26-sb-simplified.nc')\nthomas_fp = os.path.join('data', 'thomas_fire_boundary.geojson')\n\n# Import landsat data\nlandsat = rioxr.open_rasterio(land_fp)\n\n# Import Thomas Fire perimeter\nthomas_fire_perimeter = gpd.read_file(thomas_fp)\n\n\n\n\nIn this section we will take a preliminary look at the imported landsat data - in order to understand how to visualize it with respect to the Thomas Fire perimenter data.\n\n# View landsat\nlandsat\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870, band: 1)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * band         (band) int64 1\n    spatial_ref  int64 0\nData variables:\n    red          (band, y, x) float64 ...\n    green        (band, y, x) float64 ...\n    blue         (band, y, x) float64 ...\n    nir08        (band, y, x) float64 ...\n    swir22       (band, y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870band: 1Coordinates: (4)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])band(band)int641array([1])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\n\n# View landsat sizes\nlandsat.sizes\n\nFrozen({'y': 731, 'x': 870, 'band': 1})\n\n\n\n# Landsat CRS\nlandsat.rio.crs\n\nCRS.from_epsg(32611)\n\n\nThrough the exploration of the “landsat” xarray.Dataset, I have been able to notice the shape (5, 1, 731, 870) and the dimensions (x coordinates, y coordinates and 1 band). The data’s variables has 5 groups of information - red, green, blue, near infrared 08, and short wave infrared 22. The crs of the dataset is ESPG: 32611.\n\n\n\nIn this section, we will remove the band dimension of the Landsat data (as there is only 1).\n\n# Drop the band dimension of the data\nlandsat = landsat.squeeze()\n\n# Remove coordinates associated to band dimension\nlandsat = landsat.drop_vars('band')\n\n# Check new landsat dataset\nprint(landsat.dims, landsat.coords)\n\nFrozen({'y': 731, 'x': 870}) Coordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n    spatial_ref  int64 0\n\n\n\n\n\nIn this section, I will make some preliminary visuals of the landsat data. I will be making true and false color images.\n\n\n\n# Adjust the scale for plotting the bands for a true color image\nfig, ax = plt.subplots(figsize = (5, 5)) # Set up plot\n\n(landsat[['red', 'green', 'blue']]).to_array().plot.imshow(robust = True) # Plot Landsat True Color image\n\nax.set_title(\"Santa Barbara County (True Color Image)\")  # Add title\n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Show map\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n# Plot false color image\nfig, ax = plt.subplots(figsize = (5, 5)) # Set up plot\n\n(landsat[['swir22', 'nir08', 'red']]).to_array().plot.imshow(robust = True) # Plot landsat false color image\n\n# Add title\nax.set_title(\"Santa Barbara County (False Color Image)\") \n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Show map\nplt.show()\n\n\n\n\n\n\n\n\nNotice how, in the false color image, the area approximating the Thomas Fires are a orange-red color compared to the rest of the green in the county.\n\n\n\n\nIn this final section, we will create maps of Santa Barbara overlayed with the Thomas Fire perimeter data (that we obtained in the fire perimeter notebook).\n\n# Set CRS of landsat and thomas_fire_perimeter equivalent\nthomas_fire_perimeter = thomas_fire_perimeter.to_crs(crs = landsat.rio.crs)\n\n# Test if equivalencies true\nassert thomas_fire_perimeter.crs == landsat.rio.crs\n\n\n# Create bounding box for fire perimeters\nlandsat_bounded = landsat.rio.clip_box(*thomas_fire_perimeter.total_bounds)\n\n# Clip map to fire perimeter bounds\nfig, ax = plt.subplots(figsize = (10, 10)) # Setup plot\nlandsat_bounded[['swir22', 'nir08', 'red']].to_array().plot.imshow(ax = ax, robust = True) # Plot the landsat bands\n\nthomas_fire_perimeter.boundary.plot(ax = ax, edgecolor = '#5F0A11', linewidth = 2, label=\"Thomas Fire Boundary\") # Plot the thomas fire data on same plot\n\n# Add title\nax.set_title(\"Thomas Fire Burn Perimeter (2017) in Santa Barbara County (False Color Image)\")  \n\n# Set legend within map borders\nax.legend()\n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Set legend\nax.legend()\n\n# Show map\nplt.show()\n\n\n\n\n\n\n\n\n\n\nThe 2 maps in the “Map” portion of this notebook, shows Santa Barbara County with fase color imagery - which include short wave infrared, near infrared, and red bands. The 2017 Thomas Fire burn perimeter is outlined in dark red, on top of this false image map, and it also appears red inside the perimeter (because of the false color imaging). This is due to the fact that it highly reflects shortwave infared. The Thomas Fire started 12/4/2017 and was contained on 1/12/2018. This imagery is therefore taken shortly after the fire was contained, on 1/26/2018."
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-3.html#about",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-3.html#about",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "The Santa Barbara Thomas Fre “… burned approximately 281,893 acres (440 sq mi; 114,078 ha) before being fully contained on January 12, 2018, making it the largest wildfire in modern California history at the time.”Wikipedia It was hugely detrimental to the impacted areas, economically and environmentally.\nThe purpose of this blogpost is to explore and visualize the impacts of the Santa Barbara Thomas Fire. In this post we will cover the impact the wildfire had on the air quality index of the surrounding area as well as the burn scar it produced.\nThe Air Quality Index (AQI) is a tool for reporting daily air quality. It tells you how clean or polluted your air is and what associated health effects might be a concern for you. Health effects can include negative long-term health impacts like “heart or lung disease, asthma attacks, heart attacks, irregular heartbeat, decreased lung function, and increased respiratory symptoms, such as irritation of the airways, coughing or difficulty breathing” as cited in EPA.gov - EJScreen .\nThe visualization of the Thomas Fire burn scar allows us to see the preliminary impact the fire had on infrastructures, ecosystems, and communities - through its size, shape, and location.\n\n\n\nThe AQI analysis portion of the project introduced me to working with fundamental python data cleaning tools, the DateTime module, as well as graph creation. The latter portion allowed me to try my hand with working with satellite data, false and true colour imagery creation, and map creation.\n\n\n\nLandsat Data: This contains red, green, blue, near-infrared and shortwave infrared bands from the Landsat Collection 2 Level-2, collected by the Landsat 8 satellite. The data was retrieved from the Microsoft Planetary Computer data catalogue and pre-processed to remove data outside land and coarsen the spatial resolution.\nCitation: Microsoft Planetary Computer. Planetary Computer. (2018, January 12). https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2\nThomas Fire Perimeter Data: This dataset was published and maintained by CAL FIRE, but accessed through Data.gov. The statewide fire history geospatial dataset is updated annually from the previous fire season, during spring, from units across the state and cooperating agencies.\nCitation: Publisher CAL FIRE. (2024, May 14). State of California - california fire perimeters (all). Catalog. https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436\nAir Quality Index (AQI): This dataset is sourced from the EPA’s AirData tool. These files are updated twice per year and is calculated daily for each monitor for the Criteria Gases and PM10 and PM2.5. For this analysis, I will use daily AQI data for 2017 and 2018.\nCitation: Environmental Protection Agency AirData (2024), Daily AQI by County [Data Set] Available from: https://www.epa.gov/outdoor-air-quality-data/download-daily-data. Access date: October 20, 2024.\n\n\n\nThis repository was created as the second and fourth assignments for the graduate course EDS 220: Working with Environmental Datasets in the Masters of Environmental Data Science (MEDS) program, taught by Dr. Carmen Galaz García.\n\n\n\nGitHub Link"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-3.html#import-libraries",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-3.html#import-libraries",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "Importing all relevant libraries - for all excersizes in this blog post.\n\n# Import Libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport rioxarray as rioxr"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-3.html#air-quality-index-analysis",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-3.html#air-quality-index-analysis",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "In this section I will be plotting the daily AQI as well as 5-day average AQI from 2017-2018. First, I’ll read in the data and clean the column namees for easier handling.\n\n# Read in data\naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip', compression = 'zip')\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip', compression = 'zip')\n\n# Concatenate both dataframes\naqi = pd.concat([aqi_17, aqi_18])\n\n# Simplify column names\naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\nI’ll then filter the data for AQI representative of Santa Barbara county only.\n\n# Create filter Santa Barbara df with dropped columns\naqi_sb = aqi[aqi['county_name'] == 'Santa Barbara']\naqi_sb = aqi_sb.drop(columns = ['state_name','county_name','state_code','county_code'], axis = 1)\n               \n# Change 'date' to datetime and set to index\naqi_sb.date = pd.to_datetime(aqi_sb['date'])\naqi_sb = aqi_sb.set_index('date')\n\nWe will use rolling averages to visualize short-term temporal trends. As my datetime column already has the day, I can use the pandas.DataFrame.rolling() method to get the average AQI within a 5 day window.\n\n\n\n\n# Calculate AQI rolling average over 5 days\nrolling_average = aqi_sb['aqi'].rolling('5D').mean()\n               \n# Create column with new variable 'rolling_variable'\naqi_sb['five_day_average'] = rolling_average\n\nFinally I’ll create a plot with the daily and five day average AI for Santa Barbara. This will give us a good understanding of how the AQI was impacted - in large part due to the Thomas Fire.\n\n\n\n\n# Initialize figure\nfig, ax = plt.subplots(figsize=(9,5))\n\n# Add daily and 5-day average AQI\naqi_sb.five_day_average.plot(ax=ax, color = 'orange', zorder = 3)\naqi_sb.aqi.plot(ax=ax, color = 'cornflowerblue', zorder = 2)\n\n# Update axis labels and title\nplt.xlabel('Date')\nplt.ylabel('AQI')\nplt.title('AQI during the 2017 Thomas Fire in Santa Barbara County')\n\n# Add legend\nax.legend(labels = ['Daily AQI', '5-day average AQI'])\n\nplt.show()"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-3.html#fire-perimeter-data-retrieval-and-selection",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-3.html#fire-perimeter-data-retrieval-and-selection",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "# Display all columns when looking at dataframes\npd.set_option(\"display.max.columns\", None)\n\n\n# Create data filepath\nfp = os.path.join('data','California_Fire_Perimeters_(all).shp')\n\n# Create dataframe for CA fire perimeter shapefile\nca_fire_perimeter = gpd.read_file(fp)\n\n\n\n\nIn this section we will take a preliminary look at the imported fire perimeter data - in order to understand how to extract the Thomas Fire perimenter data.\n\n# Check dataframe head\nca_fire_perimeter.head(3)\n\n\n\n\n\n\n\n\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nALARM_DATE\nCONT_DATE\nCAUSE\nC_METHOD\nOBJECTIVE\nGIS_ACRES\nCOMMENTS\nCOMPLEX_NA\nIRWINID\nFIRE_NUM\nCOMPLEX_ID\nDECADES\ngeometry\n\n\n\n\n0\n2023\nCA\nCDF\nSKU\nWHITWORTH\n00004808\n2023-06-17\n2023-06-17\n5\n1\n1\n5.72913\nNone\nNone\n{7985848C-0AC2-4BA4-8F0E-29F778652E61}\nNone\nNone\n2020\nPOLYGON ((-13682443.000 5091132.739, -13682445...\n\n\n1\n2023\nCA\nLRA\nBTU\nKAISER\n00010225\n2023-06-02\n2023-06-02\n5\n1\n1\n13.60240\nNone\nNone\n{43EBCC88-B3AC-48EB-8EF5-417FE0939CCF}\nNone\nNone\n2020\nPOLYGON ((-13576727.142 4841226.161, -13576726...\n\n\n2\n2023\nCA\nCDF\nAEU\nJACKSON\n00017640\n2023-07-01\n2023-07-02\n2\n1\n1\n27.81450\nNone\nNone\n{B64E1355-BF1D-441A-95D0-BC1FBB93483B}\nNone\nNone\n2020\nPOLYGON ((-13459243.000 4621236.000, -13458968...\n\n\n\n\n\n\n\n\n# Check CRS - and type\nca_fire_perimeter.crs\n\n&lt;Projected CRS: EPSG:3857&gt;\nName: WGS 84 / Pseudo-Mercator\nAxis Info [cartesian]:\n- X[east]: Easting (metre)\n- Y[north]: Northing (metre)\nArea of Use:\n- name: World between 85.06°S and 85.06°N.\n- bounds: (-180.0, -85.06, 180.0, 85.06)\nCoordinate Operation:\n- name: Popular Visualisation Pseudo-Mercator\n- method: Popular Visualisation Pseudo Mercator\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\nAfter the exploration of the California perimeter shape file, imported into this notebook, I see that is has 22,260 fire perimeter observations with columns for varied descriptive markers including: year, fire name, alarm date, and geometery. I observe that some of the column data types int64 and float64, however, I may want to change the date columns into datetime objects for manipulation. The CRS of this shapefile is a projected coordinate reference system, EPSG: 3857 and is a popular crs for web mapping services.\n\n\n\nNext, I will clean the data for easier data manipulation.\n\n# Simplify column names by replacing spaces and no capitilization\nca_fire_perimeter.columns = (ca_fire_perimeter.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\n# Make dates into DateTime object\nca_fire_perimeter.alarm_date = pd.to_datetime(ca_fire_perimeter.alarm_date)\nca_fire_perimeter.cont_date = pd.to_datetime(ca_fire_perimeter.cont_date)\n\n\n\n\nHere, I will select for the Thomas Fire Boundary (2017), and save it as a new geospatial file.\n\n# Select Thomas Fire in 2017\nthomas_fire_boundary = ca_fire_perimeter[(ca_fire_perimeter['alarm_date'] &gt; '2016-12-31') & \n                                         (ca_fire_perimeter['alarm_date'] &lt; '2018-01-01') &\n                                         (ca_fire_perimeter['fire_name'] == 'THOMAS')]\n\n\n# View dataframe\nthomas_fire_boundary\n\n\n\n\n\n\n\n\nyear_\nstate\nagency\nunit_id\nfire_name\ninc_num\nalarm_date\ncont_date\ncause\nc_method\nobjective\ngis_acres\ncomments\ncomplex_na\nirwinid\nfire_num\ncomplex_id\ndecades\ngeometry\n\n\n\n\n2654\n2017\nCA\nUSF\nVNC\nTHOMAS\n00003583\n2017-12-04\n2018-01-12\n9\n7\n1\n281791.0\nCONT_DATE based on Inciweb\nNone\nNone\nNone\nNone\n2010\nMULTIPOLYGON (((-13316089.016 4088553.040, -13...\n\n\n\n\n\n\n\n\n# Save dataframe as geospatial file in /data folder\nthomas_fire_boundary.to_file('data/thomas_fire_boundary.geojson', driver = 'GeoJSON')\n\nI chose to convert the alarm_date and cont_date variables into DateTime objects, and wanted them to retain that data type. As I would need to convert DateTime objects back into strings to save as shapefile, I chose to store the new data frame as a GeoJSON file. I have saved the data in the ‘data/’ folder common to this project."
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-3.html#false-and-true-color-images",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-3.html#false-and-true-color-images",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "In a new notebook, I have created a path to the Thomas Fire perimeter data saved in the previous step.\n\n\n\n# Set up file paths\nland_fp = os.path.join('data', 'landsat8-2018-01-26-sb-simplified.nc')\nthomas_fp = os.path.join('data', 'thomas_fire_boundary.geojson')\n\n# Import landsat data\nlandsat = rioxr.open_rasterio(land_fp)\n\n# Import Thomas Fire perimeter\nthomas_fire_perimeter = gpd.read_file(thomas_fp)\n\n\n\n\nIn this section we will take a preliminary look at the imported landsat data - in order to understand how to visualize it with respect to the Thomas Fire perimenter data.\n\n# View landsat\nlandsat\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870, band: 1)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * band         (band) int64 1\n    spatial_ref  int64 0\nData variables:\n    red          (band, y, x) float64 ...\n    green        (band, y, x) float64 ...\n    blue         (band, y, x) float64 ...\n    nir08        (band, y, x) float64 ...\n    swir22       (band, y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870band: 1Coordinates: (4)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])band(band)int641array([1])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\n\n# View landsat sizes\nlandsat.sizes\n\nFrozen({'y': 731, 'x': 870, 'band': 1})\n\n\n\n# Landsat CRS\nlandsat.rio.crs\n\nCRS.from_epsg(32611)\n\n\nThrough the exploration of the “landsat” xarray.Dataset, I have been able to notice the shape (5, 1, 731, 870) and the dimensions (x coordinates, y coordinates and 1 band). The data’s variables has 5 groups of information - red, green, blue, near infrared 08, and short wave infrared 22. The crs of the dataset is ESPG: 32611.\n\n\n\nIn this section, we will remove the band dimension of the Landsat data (as there is only 1).\n\n# Drop the band dimension of the data\nlandsat = landsat.squeeze()\n\n# Remove coordinates associated to band dimension\nlandsat = landsat.drop_vars('band')\n\n# Check new landsat dataset\nprint(landsat.dims, landsat.coords)\n\nFrozen({'y': 731, 'x': 870}) Coordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n    spatial_ref  int64 0\n\n\n\n\n\nIn this section, I will make some preliminary visuals of the landsat data. I will be making true and false color images.\n\n\n\n# Adjust the scale for plotting the bands for a true color image\nfig, ax = plt.subplots(figsize = (5, 5)) # Set up plot\n\n(landsat[['red', 'green', 'blue']]).to_array().plot.imshow(robust = True) # Plot Landsat True Color image\n\nax.set_title(\"Santa Barbara County (True Color Image)\")  # Add title\n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Show map\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n# Plot false color image\nfig, ax = plt.subplots(figsize = (5, 5)) # Set up plot\n\n(landsat[['swir22', 'nir08', 'red']]).to_array().plot.imshow(robust = True) # Plot landsat false color image\n\n# Add title\nax.set_title(\"Santa Barbara County (False Color Image)\") \n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Show map\nplt.show()\n\n\n\n\n\n\n\n\nNotice how, in the false color image, the area approximating the Thomas Fires are a orange-red color compared to the rest of the green in the county.\n\n\n\n\nIn this final section, we will create maps of Santa Barbara overlayed with the Thomas Fire perimeter data (that we obtained in the fire perimeter notebook).\n\n# Set CRS of landsat and thomas_fire_perimeter equivalent\nthomas_fire_perimeter = thomas_fire_perimeter.to_crs(crs = landsat.rio.crs)\n\n# Test if equivalencies true\nassert thomas_fire_perimeter.crs == landsat.rio.crs\n\n\n# Create bounding box for fire perimeters\nlandsat_bounded = landsat.rio.clip_box(*thomas_fire_perimeter.total_bounds)\n\n# Clip map to fire perimeter bounds\nfig, ax = plt.subplots(figsize = (10, 10)) # Setup plot\nlandsat_bounded[['swir22', 'nir08', 'red']].to_array().plot.imshow(ax = ax, robust = True) # Plot the landsat bands\n\nthomas_fire_perimeter.boundary.plot(ax = ax, edgecolor = '#5F0A11', linewidth = 2, label=\"Thomas Fire Boundary\") # Plot the thomas fire data on same plot\n\n# Add title\nax.set_title(\"Thomas Fire Burn Perimeter (2017) in Santa Barbara County (False Color Image)\")  \n\n# Set legend within map borders\nax.legend()\n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Set legend\nax.legend()\n\n# Show map\nplt.show()\n\n\n\n\n\n\n\n\n\n\nThe 2 maps in the “Map” portion of this notebook, shows Santa Barbara County with fase color imagery - which include short wave infrared, near infrared, and red bands. The 2017 Thomas Fire burn perimeter is outlined in dark red, on top of this false image map, and it also appears red inside the perimeter (because of the false color imaging). This is due to the fact that it highly reflects shortwave infared. The Thomas Fire started 12/4/2017 and was contained on 1/12/2018. This imagery is therefore taken shortly after the fire was contained, on 1/26/2018."
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-4.html",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-4.html",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "The Thomas fire burns through Los Padres National Forest near Ojai, Calif., on Friday, Dec. 8, 2017. (AP Photo/Noah Berger)source\n\n\n\n\nThe Santa Barbara Thomas Fre “… burned approximately 281,893 acres (440 sq mi; 114,078 ha) before being fully contained on January 12, 2018, making it the largest wildfire in modern California history at the time.”Wikipedia It was hugely detrimental to the impacted areas, economically and environmentally.\nThe purpose of this blogpost is to explore and visualize the impacts of the Santa Barbara Thomas Fire. In this post we will cover the impact the wildfire had on the air quality index of the surrounding area as well as the burn scar it produced.\nThe Air Quality Index (AQI) is a tool for reporting daily air quality. It tells you how clean or polluted your air is and what associated health effects might be a concern for you. Health effects can include negative long-term health impacts like “heart or lung disease, asthma attacks, heart attacks, irregular heartbeat, decreased lung function, and increased respiratory symptoms, such as irritation of the airways, coughing or difficulty breathing” as cited in EPA.gov - EJScreen .\nThe visualization of the Thomas Fire burn scar allows us to see the preliminary impact the fire had on infrastructures, ecosystems, and communities - through its size, shape, and location.\n\n\n\nThe AQI analysis portion of the project introduced me to working with fundamental python data cleaning tools, the DateTime module, as well as graph creation. The latter portion allowed me to try my hand with working with satellite data, false and true colour imagery creation, and map creation.\n\n\n\nLandsat Data: This contains red, green, blue, near-infrared and shortwave infrared bands from the Landsat Collection 2 Level-2, collected by the Landsat 8 satellite. The data was retrieved from the Microsoft Planetary Computer data catalogue and pre-processed to remove data outside land and coarsen the spatial resolution.\nCitation: Microsoft Planetary Computer. Planetary Computer. (2018, January 12). https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2\nThomas Fire Perimeter Data: This dataset was published and maintained by CAL FIRE, but accessed through Data.gov. The statewide fire history geospatial dataset is updated annually from the previous fire season, during spring, from units across the state and cooperating agencies.\nCitation: Publisher CAL FIRE. (2024, May 14). State of California - california fire perimeters (all). Catalog. https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436\nAir Quality Index (AQI): This dataset is sourced from the EPA’s AirData tool. These files are updated twice per year and is calculated daily for each monitor for the Criteria Gases and PM10 and PM2.5. For this analysis, I will use daily AQI data for 2017 and 2018.\nCitation: Environmental Protection Agency AirData (2024), Daily AQI by County [Data Set] Available from: https://www.epa.gov/outdoor-air-quality-data/download-daily-data. Access date: October 20, 2024.\n\n\n\nThis repository was created as the second and fourth assignments for the graduate course EDS 220: Working with Environmental Datasets in the Masters of Environmental Data Science (MEDS) program, taught by Dr. Carmen Galaz García.\n\n\n\nGitHub Link\n\n\n\n\nImporting all relevant libraries - for all excersizes in this blog post.\n\n# Import Libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport rioxarray as rioxr\n\n\n\n\n\n\nIn this section I will be plotting the daily AQI as well as 5-day average AQI from 2017-2018. First, I’ll read in the data and clean the column namees for easier handling.\n\n# Read in data\naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip', compression = 'zip')\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip', compression = 'zip')\n\n# Concatenate both dataframes\naqi = pd.concat([aqi_17, aqi_18])\n\n# Simplify column names\naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\nI’ll then filter the data for AQI representative of Santa Barbara county only.\n\n# Create filter Santa Barbara df with dropped columns\naqi_sb = aqi[aqi['county_name'] == 'Santa Barbara']\naqi_sb = aqi_sb.drop(columns = ['state_name','county_name','state_code','county_code'], axis = 1)\n               \n# Change 'date' to datetime and set to index\naqi_sb.date = pd.to_datetime(aqi_sb['date'])\naqi_sb = aqi_sb.set_index('date')\n\nWe will use rolling averages to visualize short-term temporal trends. As my datetime column already has the day, I can use the pandas.DataFrame.rolling() method to get the average AQI within a 5 day window.\n\n\n\n\n# Calculate AQI rolling average over 5 days\nrolling_average = aqi_sb['aqi'].rolling('5D').mean()\n               \n# Create column with new variable 'rolling_variable'\naqi_sb['five_day_average'] = rolling_average\n\nFinally I’ll create a plot with the daily and five day average AI for Santa Barbara. This will give us a good understanding of how the AQI was impacted - in large part due to the Thomas Fire.\n\n\n\n\n# Initialize figure\nfig, ax = plt.subplots(figsize=(9,5))\n\n# Add daily and 5-day average AQI\naqi_sb.five_day_average.plot(ax=ax, color = 'orange', zorder = 3)\naqi_sb.aqi.plot(ax=ax, color = 'cornflowerblue', zorder = 2)\n\n# Update axis labels and title\nplt.xlabel('Date')\nplt.ylabel('AQI')\nplt.title('AQI during the 2017 Thomas Fire in Santa Barbara County')\n\n# Add legend\nax.legend(labels = ['Daily AQI', '5-day average AQI'])\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Display all columns when looking at dataframes\npd.set_option(\"display.max.columns\", None)\n\n\n# Create data filepath\nfp = os.path.join('data','California_Fire_Perimeters_(all).shp')\n\n# Create dataframe for CA fire perimeter shapefile\nca_fire_perimeter = gpd.read_file(fp)\n\n\n\n\nIn this section we will take a preliminary look at the imported fire perimeter data - in order to understand how to extract the Thomas Fire perimenter data.\n\n# Check dataframe head\nca_fire_perimeter.head(3)\n\n\n\n\n\n\n\n\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nALARM_DATE\nCONT_DATE\nCAUSE\nC_METHOD\nOBJECTIVE\nGIS_ACRES\nCOMMENTS\nCOMPLEX_NA\nIRWINID\nFIRE_NUM\nCOMPLEX_ID\nDECADES\ngeometry\n\n\n\n\n0\n2023\nCA\nCDF\nSKU\nWHITWORTH\n00004808\n2023-06-17\n2023-06-17\n5\n1\n1\n5.72913\nNone\nNone\n{7985848C-0AC2-4BA4-8F0E-29F778652E61}\nNone\nNone\n2020\nPOLYGON ((-13682443.000 5091132.739, -13682445...\n\n\n1\n2023\nCA\nLRA\nBTU\nKAISER\n00010225\n2023-06-02\n2023-06-02\n5\n1\n1\n13.60240\nNone\nNone\n{43EBCC88-B3AC-48EB-8EF5-417FE0939CCF}\nNone\nNone\n2020\nPOLYGON ((-13576727.142 4841226.161, -13576726...\n\n\n2\n2023\nCA\nCDF\nAEU\nJACKSON\n00017640\n2023-07-01\n2023-07-02\n2\n1\n1\n27.81450\nNone\nNone\n{B64E1355-BF1D-441A-95D0-BC1FBB93483B}\nNone\nNone\n2020\nPOLYGON ((-13459243.000 4621236.000, -13458968...\n\n\n\n\n\n\n\n\n# Check CRS - and type\nca_fire_perimeter.crs\n\n&lt;Projected CRS: EPSG:3857&gt;\nName: WGS 84 / Pseudo-Mercator\nAxis Info [cartesian]:\n- X[east]: Easting (metre)\n- Y[north]: Northing (metre)\nArea of Use:\n- name: World between 85.06°S and 85.06°N.\n- bounds: (-180.0, -85.06, 180.0, 85.06)\nCoordinate Operation:\n- name: Popular Visualisation Pseudo-Mercator\n- method: Popular Visualisation Pseudo Mercator\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\nAfter the exploration of the California perimeter shape file, imported into this notebook, I see that is has 22,260 fire perimeter observations with columns for varied descriptive markers including: year, fire name, alarm date, and geometery. I observe that some of the column data types int64 and float64, however, I may want to change the date columns into datetime objects for manipulation. The CRS of this shapefile is a projected coordinate reference system, EPSG: 3857 and is a popular crs for web mapping services.\n\n\n\nNext, I will clean the data for easier data manipulation.\n\n# Simplify column names by replacing spaces and no capitilization\nca_fire_perimeter.columns = (ca_fire_perimeter.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\n# Make dates into DateTime object\nca_fire_perimeter.alarm_date = pd.to_datetime(ca_fire_perimeter.alarm_date)\nca_fire_perimeter.cont_date = pd.to_datetime(ca_fire_perimeter.cont_date)\n\n\n\n\nHere, I will select for the Thomas Fire Boundary (2017), and save it as a new geospatial file.\n\n# Select Thomas Fire in 2017\nthomas_fire_boundary = ca_fire_perimeter[(ca_fire_perimeter['alarm_date'] &gt; '2016-12-31') & \n                                         (ca_fire_perimeter['alarm_date'] &lt; '2018-01-01') &\n                                         (ca_fire_perimeter['fire_name'] == 'THOMAS')]\n\n\n# View dataframe\nthomas_fire_boundary\n\n\n\n\n\n\n\n\nyear_\nstate\nagency\nunit_id\nfire_name\ninc_num\nalarm_date\ncont_date\ncause\nc_method\nobjective\ngis_acres\ncomments\ncomplex_na\nirwinid\nfire_num\ncomplex_id\ndecades\ngeometry\n\n\n\n\n2654\n2017\nCA\nUSF\nVNC\nTHOMAS\n00003583\n2017-12-04\n2018-01-12\n9\n7\n1\n281791.0\nCONT_DATE based on Inciweb\nNone\nNone\nNone\nNone\n2010\nMULTIPOLYGON (((-13316089.016 4088553.040, -13...\n\n\n\n\n\n\n\n\n# Save dataframe as geospatial file in /data folder\nthomas_fire_boundary.to_file('data/thomas_fire_boundary.geojson', driver = 'GeoJSON')\n\nI chose to convert the alarm_date and cont_date variables into DateTime objects, and wanted them to retain that data type. As I would need to convert DateTime objects back into strings to save as shapefile, I chose to store the new data frame as a GeoJSON file. I have saved the data in the ‘data/’ folder common to this project.\n\n\n\n\n\nIn a new notebook, I have created a path to the Thomas Fire perimeter data saved in the previous step.\n\n\n\n# Set up file paths\nland_fp = os.path.join('data', 'landsat8-2018-01-26-sb-simplified.nc')\nthomas_fp = os.path.join('data', 'thomas_fire_boundary.geojson')\n\n# Import landsat data\nlandsat = rioxr.open_rasterio(land_fp)\n\n# Import Thomas Fire perimeter\nthomas_fire_perimeter = gpd.read_file(thomas_fp)\n\n\n\n\nIn this section we will take a preliminary look at the imported landsat data - in order to understand how to visualize it with respect to the Thomas Fire perimenter data.\n\n# View landsat\nlandsat\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870, band: 1)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * band         (band) int64 1\n    spatial_ref  int64 0\nData variables:\n    red          (band, y, x) float64 ...\n    green        (band, y, x) float64 ...\n    blue         (band, y, x) float64 ...\n    nir08        (band, y, x) float64 ...\n    swir22       (band, y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870band: 1Coordinates: (4)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])band(band)int641array([1])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\n\n# View landsat sizes\nlandsat.sizes\n\nFrozen({'y': 731, 'x': 870, 'band': 1})\n\n\n\n# Landsat CRS\nlandsat.rio.crs\n\nCRS.from_epsg(32611)\n\n\nThrough the exploration of the “landsat” xarray.Dataset, I have been able to notice the shape (5, 1, 731, 870) and the dimensions (x coordinates, y coordinates and 1 band). The data’s variables has 5 groups of information - red, green, blue, near infrared 08, and short wave infrared 22. The crs of the dataset is ESPG: 32611.\n\n\n\nIn this section, we will remove the band dimension of the Landsat data (as there is only 1).\n\n# Drop the band dimension of the data\nlandsat = landsat.squeeze()\n\n# Remove coordinates associated to band dimension\nlandsat = landsat.drop_vars('band')\n\n# Check new landsat dataset\nprint(landsat.dims, landsat.coords)\n\nFrozen({'y': 731, 'x': 870}) Coordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n    spatial_ref  int64 0\n\n\n\n\n\nIn this section, I will make some preliminary visuals of the landsat data. I will be making true and false color images.\n\n\n\n# Adjust the scale for plotting the bands for a true color image\nfig, ax = plt.subplots(figsize = (5, 5)) # Set up plot\n\n(landsat[['red', 'green', 'blue']]).to_array().plot.imshow(robust = True) # Plot Landsat True Color image\n\nax.set_title(\"Santa Barbara County (True Color Image)\")  # Add title\n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Show map\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n# Plot false color image\nfig, ax = plt.subplots(figsize = (5, 5)) # Set up plot\n\n(landsat[['swir22', 'nir08', 'red']]).to_array().plot.imshow(robust = True) # Plot landsat false color image\n\n# Add title\nax.set_title(\"Santa Barbara County (False Color Image)\") \n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Show map\nplt.show()\n\n\n\n\n\n\n\n\nNotice how, in the false color image, the area approximating the Thomas Fires are a orange-red color compared to the rest of the green in the county.\n\n\n\n\nIn this final section, we will create maps of Santa Barbara overlayed with the Thomas Fire perimeter data (that we obtained in the fire perimeter notebook).\n\n# Set CRS of landsat and thomas_fire_perimeter equivalent\nthomas_fire_perimeter = thomas_fire_perimeter.to_crs(crs = landsat.rio.crs)\n\n# Test if equivalencies true\nassert thomas_fire_perimeter.crs == landsat.rio.crs\n\n\n# Create bounding box for fire perimeters\nlandsat_bounded = landsat.rio.clip_box(*thomas_fire_perimeter.total_bounds)\n\n# Clip map to fire perimeter bounds\nfig, ax = plt.subplots(figsize = (10, 10)) # Setup plot\nlandsat_bounded[['swir22', 'nir08', 'red']].to_array().plot.imshow(ax = ax, robust = True) # Plot the landsat bands\n\nthomas_fire_perimeter.boundary.plot(ax = ax, edgecolor = '#5F0A11', linewidth = 2, label=\"Thomas Fire Boundary\") # Plot the thomas fire data on same plot\n\n# Add title\nax.set_title(\"Thomas Fire Burn Perimeter (2017) in Santa Barbara County (False Color Image)\")  \n\n# Set legend within map borders\nax.legend()\n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Set legend\nax.legend()\n\n# Show map\nplt.show()\n\n\n\n\n\n\n\n\n\n\nThe 2 maps in the “Map” portion of this notebook, shows Santa Barbara County with fase color imagery - which include short wave infrared, near infrared, and red bands. The 2017 Thomas Fire burn perimeter is outlined in dark red, on top of this false image map, and it also appears red inside the perimeter (because of the false color imaging). This is due to the fact that it highly reflects shortwave infared. The Thomas Fire started 12/4/2017 and was contained on 1/12/2018. This imagery is therefore taken shortly after the fire was contained, on 1/26/2018."
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-4.html#about",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-4.html#about",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "The Santa Barbara Thomas Fre “… burned approximately 281,893 acres (440 sq mi; 114,078 ha) before being fully contained on January 12, 2018, making it the largest wildfire in modern California history at the time.”Wikipedia It was hugely detrimental to the impacted areas, economically and environmentally.\nThe purpose of this blogpost is to explore and visualize the impacts of the Santa Barbara Thomas Fire. In this post we will cover the impact the wildfire had on the air quality index of the surrounding area as well as the burn scar it produced.\nThe Air Quality Index (AQI) is a tool for reporting daily air quality. It tells you how clean or polluted your air is and what associated health effects might be a concern for you. Health effects can include negative long-term health impacts like “heart or lung disease, asthma attacks, heart attacks, irregular heartbeat, decreased lung function, and increased respiratory symptoms, such as irritation of the airways, coughing or difficulty breathing” as cited in EPA.gov - EJScreen .\nThe visualization of the Thomas Fire burn scar allows us to see the preliminary impact the fire had on infrastructures, ecosystems, and communities - through its size, shape, and location.\n\n\n\nThe AQI analysis portion of the project introduced me to working with fundamental python data cleaning tools, the DateTime module, as well as graph creation. The latter portion allowed me to try my hand with working with satellite data, false and true colour imagery creation, and map creation.\n\n\n\nLandsat Data: This contains red, green, blue, near-infrared and shortwave infrared bands from the Landsat Collection 2 Level-2, collected by the Landsat 8 satellite. The data was retrieved from the Microsoft Planetary Computer data catalogue and pre-processed to remove data outside land and coarsen the spatial resolution.\nCitation: Microsoft Planetary Computer. Planetary Computer. (2018, January 12). https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2\nThomas Fire Perimeter Data: This dataset was published and maintained by CAL FIRE, but accessed through Data.gov. The statewide fire history geospatial dataset is updated annually from the previous fire season, during spring, from units across the state and cooperating agencies.\nCitation: Publisher CAL FIRE. (2024, May 14). State of California - california fire perimeters (all). Catalog. https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436\nAir Quality Index (AQI): This dataset is sourced from the EPA’s AirData tool. These files are updated twice per year and is calculated daily for each monitor for the Criteria Gases and PM10 and PM2.5. For this analysis, I will use daily AQI data for 2017 and 2018.\nCitation: Environmental Protection Agency AirData (2024), Daily AQI by County [Data Set] Available from: https://www.epa.gov/outdoor-air-quality-data/download-daily-data. Access date: October 20, 2024.\n\n\n\nThis repository was created as the second and fourth assignments for the graduate course EDS 220: Working with Environmental Datasets in the Masters of Environmental Data Science (MEDS) program, taught by Dr. Carmen Galaz García.\n\n\n\nGitHub Link"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-4.html#import-libraries",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-4.html#import-libraries",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "Importing all relevant libraries - for all excersizes in this blog post.\n\n# Import Libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport geopandas as gpd\nimport rioxarray as rioxr"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-4.html#air-quality-index-analysis",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-4.html#air-quality-index-analysis",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "In this section I will be plotting the daily AQI as well as 5-day average AQI from 2017-2018. First, I’ll read in the data and clean the column namees for easier handling.\n\n# Read in data\naqi_17 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip', compression = 'zip')\naqi_18 = pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip', compression = 'zip')\n\n# Concatenate both dataframes\naqi = pd.concat([aqi_17, aqi_18])\n\n# Simplify column names\naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\nI’ll then filter the data for AQI representative of Santa Barbara county only.\n\n# Create filter Santa Barbara df with dropped columns\naqi_sb = aqi[aqi['county_name'] == 'Santa Barbara']\naqi_sb = aqi_sb.drop(columns = ['state_name','county_name','state_code','county_code'], axis = 1)\n               \n# Change 'date' to datetime and set to index\naqi_sb.date = pd.to_datetime(aqi_sb['date'])\naqi_sb = aqi_sb.set_index('date')\n\nWe will use rolling averages to visualize short-term temporal trends. As my datetime column already has the day, I can use the pandas.DataFrame.rolling() method to get the average AQI within a 5 day window.\n\n\n\n\n# Calculate AQI rolling average over 5 days\nrolling_average = aqi_sb['aqi'].rolling('5D').mean()\n               \n# Create column with new variable 'rolling_variable'\naqi_sb['five_day_average'] = rolling_average\n\nFinally I’ll create a plot with the daily and five day average AI for Santa Barbara. This will give us a good understanding of how the AQI was impacted - in large part due to the Thomas Fire.\n\n\n\n\n# Initialize figure\nfig, ax = plt.subplots(figsize=(9,5))\n\n# Add daily and 5-day average AQI\naqi_sb.five_day_average.plot(ax=ax, color = 'orange', zorder = 3)\naqi_sb.aqi.plot(ax=ax, color = 'cornflowerblue', zorder = 2)\n\n# Update axis labels and title\nplt.xlabel('Date')\nplt.ylabel('AQI')\nplt.title('AQI during the 2017 Thomas Fire in Santa Barbara County')\n\n# Add legend\nax.legend(labels = ['Daily AQI', '5-day average AQI'])\n\nplt.show()"
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-4.html#fire-perimeter-data-retrieval-and-selection",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-4.html#fire-perimeter-data-retrieval-and-selection",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "# Display all columns when looking at dataframes\npd.set_option(\"display.max.columns\", None)\n\n\n# Create data filepath\nfp = os.path.join('data','California_Fire_Perimeters_(all).shp')\n\n# Create dataframe for CA fire perimeter shapefile\nca_fire_perimeter = gpd.read_file(fp)\n\n\n\n\nIn this section we will take a preliminary look at the imported fire perimeter data - in order to understand how to extract the Thomas Fire perimenter data.\n\n# Check dataframe head\nca_fire_perimeter.head(3)\n\n\n\n\n\n\n\n\nYEAR_\nSTATE\nAGENCY\nUNIT_ID\nFIRE_NAME\nINC_NUM\nALARM_DATE\nCONT_DATE\nCAUSE\nC_METHOD\nOBJECTIVE\nGIS_ACRES\nCOMMENTS\nCOMPLEX_NA\nIRWINID\nFIRE_NUM\nCOMPLEX_ID\nDECADES\ngeometry\n\n\n\n\n0\n2023\nCA\nCDF\nSKU\nWHITWORTH\n00004808\n2023-06-17\n2023-06-17\n5\n1\n1\n5.72913\nNone\nNone\n{7985848C-0AC2-4BA4-8F0E-29F778652E61}\nNone\nNone\n2020\nPOLYGON ((-13682443.000 5091132.739, -13682445...\n\n\n1\n2023\nCA\nLRA\nBTU\nKAISER\n00010225\n2023-06-02\n2023-06-02\n5\n1\n1\n13.60240\nNone\nNone\n{43EBCC88-B3AC-48EB-8EF5-417FE0939CCF}\nNone\nNone\n2020\nPOLYGON ((-13576727.142 4841226.161, -13576726...\n\n\n2\n2023\nCA\nCDF\nAEU\nJACKSON\n00017640\n2023-07-01\n2023-07-02\n2\n1\n1\n27.81450\nNone\nNone\n{B64E1355-BF1D-441A-95D0-BC1FBB93483B}\nNone\nNone\n2020\nPOLYGON ((-13459243.000 4621236.000, -13458968...\n\n\n\n\n\n\n\n\n# Check CRS - and type\nca_fire_perimeter.crs\n\n&lt;Projected CRS: EPSG:3857&gt;\nName: WGS 84 / Pseudo-Mercator\nAxis Info [cartesian]:\n- X[east]: Easting (metre)\n- Y[north]: Northing (metre)\nArea of Use:\n- name: World between 85.06°S and 85.06°N.\n- bounds: (-180.0, -85.06, 180.0, 85.06)\nCoordinate Operation:\n- name: Popular Visualisation Pseudo-Mercator\n- method: Popular Visualisation Pseudo Mercator\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n\n\nAfter the exploration of the California perimeter shape file, imported into this notebook, I see that is has 22,260 fire perimeter observations with columns for varied descriptive markers including: year, fire name, alarm date, and geometery. I observe that some of the column data types int64 and float64, however, I may want to change the date columns into datetime objects for manipulation. The CRS of this shapefile is a projected coordinate reference system, EPSG: 3857 and is a popular crs for web mapping services.\n\n\n\nNext, I will clean the data for easier data manipulation.\n\n# Simplify column names by replacing spaces and no capitilization\nca_fire_perimeter.columns = (ca_fire_perimeter.columns\n                  .str.lower()\n                  .str.replace(' ','_')\n                )\n\n# Make dates into DateTime object\nca_fire_perimeter.alarm_date = pd.to_datetime(ca_fire_perimeter.alarm_date)\nca_fire_perimeter.cont_date = pd.to_datetime(ca_fire_perimeter.cont_date)\n\n\n\n\nHere, I will select for the Thomas Fire Boundary (2017), and save it as a new geospatial file.\n\n# Select Thomas Fire in 2017\nthomas_fire_boundary = ca_fire_perimeter[(ca_fire_perimeter['alarm_date'] &gt; '2016-12-31') & \n                                         (ca_fire_perimeter['alarm_date'] &lt; '2018-01-01') &\n                                         (ca_fire_perimeter['fire_name'] == 'THOMAS')]\n\n\n# View dataframe\nthomas_fire_boundary\n\n\n\n\n\n\n\n\nyear_\nstate\nagency\nunit_id\nfire_name\ninc_num\nalarm_date\ncont_date\ncause\nc_method\nobjective\ngis_acres\ncomments\ncomplex_na\nirwinid\nfire_num\ncomplex_id\ndecades\ngeometry\n\n\n\n\n2654\n2017\nCA\nUSF\nVNC\nTHOMAS\n00003583\n2017-12-04\n2018-01-12\n9\n7\n1\n281791.0\nCONT_DATE based on Inciweb\nNone\nNone\nNone\nNone\n2010\nMULTIPOLYGON (((-13316089.016 4088553.040, -13...\n\n\n\n\n\n\n\n\n# Save dataframe as geospatial file in /data folder\nthomas_fire_boundary.to_file('data/thomas_fire_boundary.geojson', driver = 'GeoJSON')\n\nI chose to convert the alarm_date and cont_date variables into DateTime objects, and wanted them to retain that data type. As I would need to convert DateTime objects back into strings to save as shapefile, I chose to store the new data frame as a GeoJSON file. I have saved the data in the ‘data/’ folder common to this project."
  },
  {
    "objectID": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-4.html#false-and-true-color-images",
    "href": "posts/2024-12-01-thomas-fire-sb/Thomas_Fire_Blog_Post-4.html#false-and-true-color-images",
    "title": "Thomas Fire Analysis",
    "section": "",
    "text": "In a new notebook, I have created a path to the Thomas Fire perimeter data saved in the previous step.\n\n\n\n# Set up file paths\nland_fp = os.path.join('data', 'landsat8-2018-01-26-sb-simplified.nc')\nthomas_fp = os.path.join('data', 'thomas_fire_boundary.geojson')\n\n# Import landsat data\nlandsat = rioxr.open_rasterio(land_fp)\n\n# Import Thomas Fire perimeter\nthomas_fire_perimeter = gpd.read_file(thomas_fp)\n\n\n\n\nIn this section we will take a preliminary look at the imported landsat data - in order to understand how to visualize it with respect to the Thomas Fire perimenter data.\n\n# View landsat\nlandsat\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (y: 731, x: 870, band: 1)\nCoordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * band         (band) int64 1\n    spatial_ref  int64 0\nData variables:\n    red          (band, y, x) float64 ...\n    green        (band, y, x) float64 ...\n    blue         (band, y, x) float64 ...\n    nir08        (band, y, x) float64 ...\n    swir22       (band, y, x) float64 ...xarray.DatasetDimensions:y: 731x: 870band: 1Coordinates: (4)y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])band(band)int641array([1])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Attributes: (0)\n\n\n\n# View landsat sizes\nlandsat.sizes\n\nFrozen({'y': 731, 'x': 870, 'band': 1})\n\n\n\n# Landsat CRS\nlandsat.rio.crs\n\nCRS.from_epsg(32611)\n\n\nThrough the exploration of the “landsat” xarray.Dataset, I have been able to notice the shape (5, 1, 731, 870) and the dimensions (x coordinates, y coordinates and 1 band). The data’s variables has 5 groups of information - red, green, blue, near infrared 08, and short wave infrared 22. The crs of the dataset is ESPG: 32611.\n\n\n\nIn this section, we will remove the band dimension of the Landsat data (as there is only 1).\n\n# Drop the band dimension of the data\nlandsat = landsat.squeeze()\n\n# Remove coordinates associated to band dimension\nlandsat = landsat.drop_vars('band')\n\n# Check new landsat dataset\nprint(landsat.dims, landsat.coords)\n\nFrozen({'y': 731, 'x': 870}) Coordinates:\n  * y            (y) float64 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n  * x            (x) float64 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n    spatial_ref  int64 0\n\n\n\n\n\nIn this section, I will make some preliminary visuals of the landsat data. I will be making true and false color images.\n\n\n\n# Adjust the scale for plotting the bands for a true color image\nfig, ax = plt.subplots(figsize = (5, 5)) # Set up plot\n\n(landsat[['red', 'green', 'blue']]).to_array().plot.imshow(robust = True) # Plot Landsat True Color image\n\nax.set_title(\"Santa Barbara County (True Color Image)\")  # Add title\n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Show map\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n# Plot false color image\nfig, ax = plt.subplots(figsize = (5, 5)) # Set up plot\n\n(landsat[['swir22', 'nir08', 'red']]).to_array().plot.imshow(robust = True) # Plot landsat false color image\n\n# Add title\nax.set_title(\"Santa Barbara County (False Color Image)\") \n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Show map\nplt.show()\n\n\n\n\n\n\n\n\nNotice how, in the false color image, the area approximating the Thomas Fires are a orange-red color compared to the rest of the green in the county.\n\n\n\n\nIn this final section, we will create maps of Santa Barbara overlayed with the Thomas Fire perimeter data (that we obtained in the fire perimeter notebook).\n\n# Set CRS of landsat and thomas_fire_perimeter equivalent\nthomas_fire_perimeter = thomas_fire_perimeter.to_crs(crs = landsat.rio.crs)\n\n# Test if equivalencies true\nassert thomas_fire_perimeter.crs == landsat.rio.crs\n\n\n# Create bounding box for fire perimeters\nlandsat_bounded = landsat.rio.clip_box(*thomas_fire_perimeter.total_bounds)\n\n# Clip map to fire perimeter bounds\nfig, ax = plt.subplots(figsize = (10, 10)) # Setup plot\nlandsat_bounded[['swir22', 'nir08', 'red']].to_array().plot.imshow(ax = ax, robust = True) # Plot the landsat bands\n\nthomas_fire_perimeter.boundary.plot(ax = ax, edgecolor = '#5F0A11', linewidth = 2, label=\"Thomas Fire Boundary\") # Plot the thomas fire data on same plot\n\n# Add title\nax.set_title(\"Thomas Fire Burn Perimeter (2017) in Santa Barbara County (False Color Image)\")  \n\n# Set legend within map borders\nax.legend()\n\n# Set axis labels\nax.set_xlabel(\"Longitude\") \nax.set_ylabel(\"Latitude\")\n\n# Set legend\nax.legend()\n\n# Show map\nplt.show()\n\n\n\n\n\n\n\n\n\n\nThe 2 maps in the “Map” portion of this notebook, shows Santa Barbara County with fase color imagery - which include short wave infrared, near infrared, and red bands. The 2017 Thomas Fire burn perimeter is outlined in dark red, on top of this false image map, and it also appears red inside the perimeter (because of the false color imaging). This is due to the fact that it highly reflects shortwave infared. The Thomas Fire started 12/4/2017 and was contained on 1/12/2018. This imagery is therefore taken shortly after the fire was contained, on 1/26/2018."
  },
  {
    "objectID": "posts/2024-12-13-statistics-final/heat_income_sanjose.html#github-repo",
    "href": "posts/2024-12-13-statistics-final/heat_income_sanjose.html#github-repo",
    "title": "Investigating Temperature and Income in San Jose",
    "section": "GitHub Repo",
    "text": "GitHub Repo\nAccess the unfiltered code here!"
  }
]